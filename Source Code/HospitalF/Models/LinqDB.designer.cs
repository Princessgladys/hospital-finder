#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalF.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HospitalF")]
	public partial class LinqDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertWordDictionary(WordDictionary instance);
    partial void UpdateWordDictionary(WordDictionary instance);
    partial void DeleteWordDictionary(WordDictionary instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertDisease(Disease instance);
    partial void UpdateDisease(Disease instance);
    partial void DeleteDisease(Disease instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertDoctor_Hospital(Doctor_Hospital instance);
    partial void UpdateDoctor_Hospital(Doctor_Hospital instance);
    partial void DeleteDoctor_Hospital(Doctor_Hospital instance);
    partial void InsertDoctor_Speciality(Doctor_Speciality instance);
    partial void UpdateDoctor_Speciality(Doctor_Speciality instance);
    partial void DeleteDoctor_Speciality(Doctor_Speciality instance);
    partial void InsertFacility(Facility instance);
    partial void UpdateFacility(Facility instance);
    partial void DeleteFacility(Facility instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertFeedbackType(FeedbackType instance);
    partial void UpdateFeedbackType(FeedbackType instance);
    partial void DeleteFeedbackType(FeedbackType instance);
    partial void InsertHospital(Hospital instance);
    partial void UpdateHospital(Hospital instance);
    partial void DeleteHospital(Hospital instance);
    partial void InsertHospital_Facility(Hospital_Facility instance);
    partial void UpdateHospital_Facility(Hospital_Facility instance);
    partial void DeleteHospital_Facility(Hospital_Facility instance);
    partial void InsertHospital_Service(Hospital_Service instance);
    partial void UpdateHospital_Service(Hospital_Service instance);
    partial void DeleteHospital_Service(Hospital_Service instance);
    partial void InsertHospital_Speciality(Hospital_Speciality instance);
    partial void UpdateHospital_Speciality(Hospital_Speciality instance);
    partial void DeleteHospital_Speciality(Hospital_Speciality instance);
    partial void InsertHospitalType(HospitalType instance);
    partial void UpdateHospitalType(HospitalType instance);
    partial void DeleteHospitalType(HospitalType instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertRating(Rating instance);
    partial void UpdateRating(Rating instance);
    partial void DeleteRating(Rating instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSentence_Word(Sentence_Word instance);
    partial void UpdateSentence_Word(Sentence_Word instance);
    partial void DeleteSentence_Word(Sentence_Word instance);
    partial void InsertSentenceDictionary(SentenceDictionary instance);
    partial void UpdateSentenceDictionary(SentenceDictionary instance);
    partial void DeleteSentenceDictionary(SentenceDictionary instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertSpeciality(Speciality instance);
    partial void UpdateSpeciality(Speciality instance);
    partial void DeleteSpeciality(Speciality instance);
    partial void InsertSpeciality_Disease(Speciality_Disease instance);
    partial void UpdateSpeciality_Disease(Speciality_Disease instance);
    partial void DeleteSpeciality_Disease(Speciality_Disease instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWard(Ward instance);
    partial void UpdateWard(Ward instance);
    partial void DeleteWard(Ward instance);
    partial void InsertWord_Hospital(Word_Hospital instance);
    partial void UpdateWord_Hospital(Word_Hospital instance);
    partial void DeleteWord_Hospital(Word_Hospital instance);
    #endregion
		
		public LinqDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HospitalFConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<WordDictionary> WordDictionaries
		{
			get
			{
				return this.GetTable<WordDictionary>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Disease> Diseases
		{
			get
			{
				return this.GetTable<Disease>();
			}
		}
		
		public System.Data.Linq.Table<District> Districts
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Doctor_Hospital> Doctor_Hospitals
		{
			get
			{
				return this.GetTable<Doctor_Hospital>();
			}
		}
		
		public System.Data.Linq.Table<Doctor_Speciality> Doctor_Specialities
		{
			get
			{
				return this.GetTable<Doctor_Speciality>();
			}
		}
		
		public System.Data.Linq.Table<Facility> Facilities
		{
			get
			{
				return this.GetTable<Facility>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<FeedbackType> FeedbackTypes
		{
			get
			{
				return this.GetTable<FeedbackType>();
			}
		}
		
		public System.Data.Linq.Table<Hospital> Hospitals
		{
			get
			{
				return this.GetTable<Hospital>();
			}
		}
		
		public System.Data.Linq.Table<Hospital_Facility> Hospital_Facilities
		{
			get
			{
				return this.GetTable<Hospital_Facility>();
			}
		}
		
		public System.Data.Linq.Table<Hospital_Service> Hospital_Services
		{
			get
			{
				return this.GetTable<Hospital_Service>();
			}
		}
		
		public System.Data.Linq.Table<Hospital_Speciality> Hospital_Specialities
		{
			get
			{
				return this.GetTable<Hospital_Speciality>();
			}
		}
		
		public System.Data.Linq.Table<HospitalType> HospitalTypes
		{
			get
			{
				return this.GetTable<HospitalType>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<Rating> Ratings
		{
			get
			{
				return this.GetTable<Rating>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Sentence_Word> Sentence_Words
		{
			get
			{
				return this.GetTable<Sentence_Word>();
			}
		}
		
		public System.Data.Linq.Table<SentenceDictionary> SentenceDictionaries
		{
			get
			{
				return this.GetTable<SentenceDictionary>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Speciality> Specialities
		{
			get
			{
				return this.GetTable<Speciality>();
			}
		}
		
		public System.Data.Linq.Table<Speciality_Disease> Speciality_Diseases
		{
			get
			{
				return this.GetTable<Speciality_Disease>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Ward> Wards
		{
			get
			{
				return this.GetTable<Ward>();
			}
		}
		
		public System.Data.Linq.Table<Word_Hospital> Word_Hospitals
		{
			get
			{
				return this.GetTable<Word_Hospital>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_SEARCH_HOSPITAL")]
		public ISingleResult<SP_SEARCH_HOSPITALResult> SP_SEARCH_HOSPITAL([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CityID", DbType="Int")] System.Nullable<int> cityID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DistrictID", DbType="Int")] System.Nullable<int> districtID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SpecialityID", DbType="Int")] System.Nullable<int> specialityID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DiseaseID", DbType="Int")] System.Nullable<int> diseaseID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cityID, districtID, specialityID, diseaseID);
			return ((ISingleResult<SP_SEARCH_HOSPITALResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LOAD_DISEASE_IN_SPECIALITY")]
		public ISingleResult<SP_LOAD_DISEASE_IN_SPECIALITYResult> SP_LOAD_DISEASE_IN_SPECIALITY([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SpecialityID", DbType="Int")] System.Nullable<int> specialityID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), specialityID);
			return ((ISingleResult<SP_LOAD_DISEASE_IN_SPECIALITYResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LOAD_DOCTOR_IN_DOCTOR_SPECIALITY")]
		public ISingleResult<SP_LOAD_DOCTOR_IN_DOCTOR_SPECIALITYResult> SP_LOAD_DOCTOR_IN_DOCTOR_SPECIALITY([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SpecialityID", DbType="Int")] System.Nullable<int> specialityID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), specialityID);
			return ((ISingleResult<SP_LOAD_DOCTOR_IN_DOCTOR_SPECIALITYResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_LOAD_SPECIALITY_BY_HOSPITALID")]
		public ISingleResult<SP_LOAD_SPECIALITY_BY_HOSPITALIDResult> SP_LOAD_SPECIALITY_BY_HOSPITALID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Hospital_ID", DbType="Int")] System.Nullable<int> hospital_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), hospital_ID);
			return ((ISingleResult<SP_LOAD_SPECIALITY_BY_HOSPITALIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_INSERT_APPOINTMENT")]
		public int SP_INSERT_APPOINTMENT([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FullName", DbType="NVarChar(32)")] string fullName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Gender", DbType="Bit")] System.Nullable<bool> gender, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Birthday", DbType="Date")] System.Nullable<System.DateTime> birthday, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PhoneNo", DbType="VarChar(13)")] string phoneNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="VarChar(64)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="Date")] System.Nullable<System.DateTime> date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Start_time", DbType="Time")] System.Nullable<System.TimeSpan> start_time, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="End_time", DbType="Time")] System.Nullable<System.TimeSpan> end_time, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Doctor_ID", DbType="Int")] System.Nullable<int> doctor_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Hospital_ID", DbType="Int")] System.Nullable<int> hospital_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Confirm_Code", DbType="VarChar(8)")] string confirm_Code)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fullName, gender, birthday, phoneNo, email, date, start_time, end_time, doctor_ID, hospital_ID, confirm_Code);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Appointment_ID;
		
		private string _Patient_Full_Name;
		
		private System.Nullable<bool> _Patient_Gender;
		
		private System.Nullable<System.DateTime> _Patient_Birthday;
		
		private string _Patient_Phone_Number;
		
		private string _Patient_Email;
		
		private System.Nullable<System.DateTime> _Appointment_Date;
		
		private System.Nullable<System.TimeSpan> _Start_Time;
		
		private System.Nullable<System.TimeSpan> _End_Time;
		
		private System.Nullable<int> _In_Charge_Doctor;
		
		private System.Nullable<int> _Curing_Hospital;
		
		private string _Confirm_Code;
		
		private System.Nullable<bool> _Is_Confirm;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Hospital> _Hospital;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppointment_IDChanging(int value);
    partial void OnAppointment_IDChanged();
    partial void OnPatient_Full_NameChanging(string value);
    partial void OnPatient_Full_NameChanged();
    partial void OnPatient_GenderChanging(System.Nullable<bool> value);
    partial void OnPatient_GenderChanged();
    partial void OnPatient_BirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnPatient_BirthdayChanged();
    partial void OnPatient_Phone_NumberChanging(string value);
    partial void OnPatient_Phone_NumberChanged();
    partial void OnPatient_EmailChanging(string value);
    partial void OnPatient_EmailChanged();
    partial void OnAppointment_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnAppointment_DateChanged();
    partial void OnStart_TimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStart_TimeChanged();
    partial void OnEnd_TimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEnd_TimeChanged();
    partial void OnIn_Charge_DoctorChanging(System.Nullable<int> value);
    partial void OnIn_Charge_DoctorChanged();
    partial void OnCuring_HospitalChanging(System.Nullable<int> value);
    partial void OnCuring_HospitalChanged();
    partial void OnConfirm_CodeChanging(string value);
    partial void OnConfirm_CodeChanged();
    partial void OnIs_ConfirmChanging(System.Nullable<bool> value);
    partial void OnIs_ConfirmChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Appointment()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Hospital = default(EntityRef<Hospital>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Appointment_ID
		{
			get
			{
				return this._Appointment_ID;
			}
			set
			{
				if ((this._Appointment_ID != value))
				{
					this.OnAppointment_IDChanging(value);
					this.SendPropertyChanging();
					this._Appointment_ID = value;
					this.SendPropertyChanged("Appointment_ID");
					this.OnAppointment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Full_Name", DbType="NVarChar(32)")]
		public string Patient_Full_Name
		{
			get
			{
				return this._Patient_Full_Name;
			}
			set
			{
				if ((this._Patient_Full_Name != value))
				{
					this.OnPatient_Full_NameChanging(value);
					this.SendPropertyChanging();
					this._Patient_Full_Name = value;
					this.SendPropertyChanged("Patient_Full_Name");
					this.OnPatient_Full_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Gender", DbType="Bit")]
		public System.Nullable<bool> Patient_Gender
		{
			get
			{
				return this._Patient_Gender;
			}
			set
			{
				if ((this._Patient_Gender != value))
				{
					this.OnPatient_GenderChanging(value);
					this.SendPropertyChanging();
					this._Patient_Gender = value;
					this.SendPropertyChanged("Patient_Gender");
					this.OnPatient_GenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Patient_Birthday
		{
			get
			{
				return this._Patient_Birthday;
			}
			set
			{
				if ((this._Patient_Birthday != value))
				{
					this.OnPatient_BirthdayChanging(value);
					this.SendPropertyChanging();
					this._Patient_Birthday = value;
					this.SendPropertyChanged("Patient_Birthday");
					this.OnPatient_BirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Phone_Number", DbType="VarChar(13)")]
		public string Patient_Phone_Number
		{
			get
			{
				return this._Patient_Phone_Number;
			}
			set
			{
				if ((this._Patient_Phone_Number != value))
				{
					this.OnPatient_Phone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Patient_Phone_Number = value;
					this.SendPropertyChanged("Patient_Phone_Number");
					this.OnPatient_Phone_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_Email", DbType="VarChar(64)")]
		public string Patient_Email
		{
			get
			{
				return this._Patient_Email;
			}
			set
			{
				if ((this._Patient_Email != value))
				{
					this.OnPatient_EmailChanging(value);
					this.SendPropertyChanging();
					this._Patient_Email = value;
					this.SendPropertyChanged("Patient_Email");
					this.OnPatient_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointment_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Appointment_Date
		{
			get
			{
				return this._Appointment_Date;
			}
			set
			{
				if ((this._Appointment_Date != value))
				{
					this.OnAppointment_DateChanging(value);
					this.SendPropertyChanging();
					this._Appointment_Date = value;
					this.SendPropertyChanged("Appointment_Date");
					this.OnAppointment_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> Start_Time
		{
			get
			{
				return this._Start_Time;
			}
			set
			{
				if ((this._Start_Time != value))
				{
					this.OnStart_TimeChanging(value);
					this.SendPropertyChanging();
					this._Start_Time = value;
					this.SendPropertyChanged("Start_Time");
					this.OnStart_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> End_Time
		{
			get
			{
				return this._End_Time;
			}
			set
			{
				if ((this._End_Time != value))
				{
					this.OnEnd_TimeChanging(value);
					this.SendPropertyChanging();
					this._End_Time = value;
					this.SendPropertyChanged("End_Time");
					this.OnEnd_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_In_Charge_Doctor", DbType="Int")]
		public System.Nullable<int> In_Charge_Doctor
		{
			get
			{
				return this._In_Charge_Doctor;
			}
			set
			{
				if ((this._In_Charge_Doctor != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIn_Charge_DoctorChanging(value);
					this.SendPropertyChanging();
					this._In_Charge_Doctor = value;
					this.SendPropertyChanged("In_Charge_Doctor");
					this.OnIn_Charge_DoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Curing_Hospital", DbType="Int")]
		public System.Nullable<int> Curing_Hospital
		{
			get
			{
				return this._Curing_Hospital;
			}
			set
			{
				if ((this._Curing_Hospital != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCuring_HospitalChanging(value);
					this.SendPropertyChanging();
					this._Curing_Hospital = value;
					this.SendPropertyChanged("Curing_Hospital");
					this.OnCuring_HospitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirm_Code", DbType="VarChar(8)")]
		public string Confirm_Code
		{
			get
			{
				return this._Confirm_Code;
			}
			set
			{
				if ((this._Confirm_Code != value))
				{
					this.OnConfirm_CodeChanging(value);
					this.SendPropertyChanging();
					this._Confirm_Code = value;
					this.SendPropertyChanged("Confirm_Code");
					this.OnConfirm_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Confirm", DbType="Bit")]
		public System.Nullable<bool> Is_Confirm
		{
			get
			{
				return this._Is_Confirm;
			}
			set
			{
				if ((this._Is_Confirm != value))
				{
					this.OnIs_ConfirmChanging(value);
					this.SendPropertyChanging();
					this._Is_Confirm = value;
					this.SendPropertyChanged("Is_Confirm");
					this.OnIs_ConfirmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Doctor", ThisKey="In_Charge_Doctor", OtherKey="Doctor_ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._In_Charge_Doctor = value.Doctor_ID;
					}
					else
					{
						this._In_Charge_Doctor = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Appointment", Storage="_Hospital", ThisKey="Curing_Hospital", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._Curing_Hospital = value.Hospital_ID;
					}
					else
					{
						this._Curing_Hospital = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WordDictionary")]
	public partial class WordDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Word_ID;
		
		private string _Word;
		
		private System.Nullable<int> _Priority;
		
		private EntitySet<Sentence_Word> _Sentence_Words;
		
		private EntitySet<Word_Hospital> _Word_Hospitals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWord_IDChanging(int value);
    partial void OnWord_IDChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnPriorityChanging(System.Nullable<int> value);
    partial void OnPriorityChanged();
    #endregion
		
		public WordDictionary()
		{
			this._Sentence_Words = new EntitySet<Sentence_Word>(new Action<Sentence_Word>(this.attach_Sentence_Words), new Action<Sentence_Word>(this.detach_Sentence_Words));
			this._Word_Hospitals = new EntitySet<Word_Hospital>(new Action<Word_Hospital>(this.attach_Word_Hospitals), new Action<Word_Hospital>(this.detach_Word_Hospitals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Word_ID
		{
			get
			{
				return this._Word_ID;
			}
			set
			{
				if ((this._Word_ID != value))
				{
					this.OnWord_IDChanging(value);
					this.SendPropertyChanging();
					this._Word_ID = value;
					this.SendPropertyChanged("Word_ID");
					this.OnWord_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="NVarChar(32)")]
		public string Word
		{
			get
			{
				return this._Word;
			}
			set
			{
				if ((this._Word != value))
				{
					this.OnWordChanging(value);
					this.SendPropertyChanging();
					this._Word = value;
					this.SendPropertyChanged("Word");
					this.OnWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int")]
		public System.Nullable<int> Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordDictionary_Sentence_Word", Storage="_Sentence_Words", ThisKey="Word_ID", OtherKey="Word_ID")]
		public EntitySet<Sentence_Word> Sentence_Words
		{
			get
			{
				return this._Sentence_Words;
			}
			set
			{
				this._Sentence_Words.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordDictionary_Word_Hospital", Storage="_Word_Hospitals", ThisKey="Word_ID", OtherKey="Word_ID")]
		public EntitySet<Word_Hospital> Word_Hospitals
		{
			get
			{
				return this._Word_Hospitals;
			}
			set
			{
				this._Word_Hospitals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sentence_Words(Sentence_Word entity)
		{
			this.SendPropertyChanging();
			entity.WordDictionary = this;
		}
		
		private void detach_Sentence_Words(Sentence_Word entity)
		{
			this.SendPropertyChanging();
			entity.WordDictionary = null;
		}
		
		private void attach_Word_Hospitals(Word_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.WordDictionary = this;
		}
		
		private void detach_Word_Hospitals(Word_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.WordDictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _City_ID;
		
		private string _City_Name;
		
		private string _Type;
		
		private EntitySet<District> _Districts;
		
		private EntitySet<Hospital> _Hospitals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCity_IDChanging(int value);
    partial void OnCity_IDChanged();
    partial void OnCity_NameChanging(string value);
    partial void OnCity_NameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public City()
		{
			this._Districts = new EntitySet<District>(new Action<District>(this.attach_Districts), new Action<District>(this.detach_Districts));
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_Name", DbType="NVarChar(32)")]
		public string City_Name
		{
			get
			{
				return this._City_Name;
			}
			set
			{
				if ((this._City_Name != value))
				{
					this.OnCity_NameChanging(value);
					this.SendPropertyChanging();
					this._City_Name = value;
					this.SendPropertyChanged("City_Name");
					this.OnCity_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(9)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_District", Storage="_Districts", ThisKey="City_ID", OtherKey="City_ID")]
		public EntitySet<District> Districts
		{
			get
			{
				return this._Districts;
			}
			set
			{
				this._Districts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Hospital", Storage="_Hospitals", ThisKey="City_ID", OtherKey="City_ID")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Districts(District entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disease")]
	public partial class Disease : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Disease_ID;
		
		private string _Disease_Name;
		
		private EntitySet<Speciality_Disease> _Speciality_Diseases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisease_IDChanging(int value);
    partial void OnDisease_IDChanged();
    partial void OnDisease_NameChanging(string value);
    partial void OnDisease_NameChanged();
    #endregion
		
		public Disease()
		{
			this._Speciality_Diseases = new EntitySet<Speciality_Disease>(new Action<Speciality_Disease>(this.attach_Speciality_Diseases), new Action<Speciality_Disease>(this.detach_Speciality_Diseases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Disease_ID
		{
			get
			{
				return this._Disease_ID;
			}
			set
			{
				if ((this._Disease_ID != value))
				{
					this.OnDisease_IDChanging(value);
					this.SendPropertyChanging();
					this._Disease_ID = value;
					this.SendPropertyChanged("Disease_ID");
					this.OnDisease_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_Name", DbType="NVarChar(64)")]
		public string Disease_Name
		{
			get
			{
				return this._Disease_Name;
			}
			set
			{
				if ((this._Disease_Name != value))
				{
					this.OnDisease_NameChanging(value);
					this.SendPropertyChanging();
					this._Disease_Name = value;
					this.SendPropertyChanged("Disease_Name");
					this.OnDisease_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_Speciality_Disease", Storage="_Speciality_Diseases", ThisKey="Disease_ID", OtherKey="Disease_ID")]
		public EntitySet<Speciality_Disease> Speciality_Diseases
		{
			get
			{
				return this._Speciality_Diseases;
			}
			set
			{
				this._Speciality_Diseases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Speciality_Diseases(Speciality_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Disease = this;
		}
		
		private void detach_Speciality_Diseases(Speciality_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Disease = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.District")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _District_ID;
		
		private string _District_Name;
		
		private string _Type;
		
		private string _Coordinate;
		
		private System.Nullable<int> _City_ID;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntitySet<Ward> _Wards;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrict_IDChanging(int value);
    partial void OnDistrict_IDChanged();
    partial void OnDistrict_NameChanging(string value);
    partial void OnDistrict_NameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCoordinateChanging(string value);
    partial void OnCoordinateChanged();
    partial void OnCity_IDChanging(System.Nullable<int> value);
    partial void OnCity_IDChanged();
    #endregion
		
		public District()
		{
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._Wards = new EntitySet<Ward>(new Action<Ward>(this.attach_Wards), new Action<Ward>(this.detach_Wards));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int District_ID
		{
			get
			{
				return this._District_ID;
			}
			set
			{
				if ((this._District_ID != value))
				{
					this.OnDistrict_IDChanging(value);
					this.SendPropertyChanging();
					this._District_ID = value;
					this.SendPropertyChanged("District_ID");
					this.OnDistrict_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District_Name", DbType="NVarChar(32)")]
		public string District_Name
		{
			get
			{
				return this._District_Name;
			}
			set
			{
				if ((this._District_Name != value))
				{
					this.OnDistrict_NameChanging(value);
					this.SendPropertyChanging();
					this._District_Name = value;
					this.SendPropertyChanged("District_Name");
					this.OnDistrict_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(9)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coordinate", DbType="VarChar(26)")]
		public string Coordinate
		{
			get
			{
				return this._Coordinate;
			}
			set
			{
				if ((this._Coordinate != value))
				{
					this.OnCoordinateChanging(value);
					this.SendPropertyChanging();
					this._Coordinate = value;
					this.SendPropertyChanged("Coordinate");
					this.OnCoordinateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", DbType="Int")]
		public System.Nullable<int> City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Hospital", Storage="_Hospitals", ThisKey="District_ID", OtherKey="District_ID")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Ward", Storage="_Wards", ThisKey="District_ID", OtherKey="District_ID")]
		public EntitySet<Ward> Wards
		{
			get
			{
				return this._Wards;
			}
			set
			{
				this._Wards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_District", Storage="_City", ThisKey="City_ID", OtherKey="City_ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Districts.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Districts.Add(this);
						this._City_ID = value.City_ID;
					}
					else
					{
						this._City_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
		
		private void attach_Wards(Ward entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_Wards(Ward entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Doctor_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private System.Nullable<bool> _Gender;
		
		private string _Degree;
		
		private string _Experience;
		
		private string _Working_Day;
		
		private System.Nullable<int> _Photo_ID;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<Doctor_Hospital> _Doctor_Hospitals;
		
		private EntitySet<Doctor_Speciality> _Doctor_Specialities;
		
		private EntitySet<Photo> _Photos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctor_IDChanging(int value);
    partial void OnDoctor_IDChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnDegreeChanging(string value);
    partial void OnDegreeChanged();
    partial void OnExperienceChanging(string value);
    partial void OnExperienceChanged();
    partial void OnWorking_DayChanging(string value);
    partial void OnWorking_DayChanged();
    partial void OnPhoto_IDChanging(System.Nullable<int> value);
    partial void OnPhoto_IDChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Doctor()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Doctor_Hospitals = new EntitySet<Doctor_Hospital>(new Action<Doctor_Hospital>(this.attach_Doctor_Hospitals), new Action<Doctor_Hospital>(this.detach_Doctor_Hospitals));
			this._Doctor_Specialities = new EntitySet<Doctor_Speciality>(new Action<Doctor_Speciality>(this.attach_Doctor_Specialities), new Action<Doctor_Speciality>(this.detach_Doctor_Specialities));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Doctor_ID
		{
			get
			{
				return this._Doctor_ID;
			}
			set
			{
				if ((this._Doctor_ID != value))
				{
					this.OnDoctor_IDChanging(value);
					this.SendPropertyChanging();
					this._Doctor_ID = value;
					this.SendPropertyChanged("Doctor_ID");
					this.OnDoctor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="NVarChar(32)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="NVarChar(32)")]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degree", DbType="NVarChar(256)")]
		public string Degree
		{
			get
			{
				return this._Degree;
			}
			set
			{
				if ((this._Degree != value))
				{
					this.OnDegreeChanging(value);
					this.SendPropertyChanging();
					this._Degree = value;
					this.SendPropertyChanged("Degree");
					this.OnDegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="NVarChar(512)")]
		public string Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Working_Day", DbType="VarChar(33)")]
		public string Working_Day
		{
			get
			{
				return this._Working_Day;
			}
			set
			{
				if ((this._Working_Day != value))
				{
					this.OnWorking_DayChanging(value);
					this.SendPropertyChanging();
					this._Working_Day = value;
					this.SendPropertyChanged("Working_Day");
					this.OnWorking_DayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo_ID", DbType="Int")]
		public System.Nullable<int> Photo_ID
		{
			get
			{
				return this._Photo_ID;
			}
			set
			{
				if ((this._Photo_ID != value))
				{
					this.OnPhoto_IDChanging(value);
					this.SendPropertyChanging();
					this._Photo_ID = value;
					this.SendPropertyChanged("Photo_ID");
					this.OnPhoto_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Appointment", Storage="_Appointments", ThisKey="Doctor_ID", OtherKey="In_Charge_Doctor")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Doctor_Hospital", Storage="_Doctor_Hospitals", ThisKey="Doctor_ID", OtherKey="Doctor_ID")]
		public EntitySet<Doctor_Hospital> Doctor_Hospitals
		{
			get
			{
				return this._Doctor_Hospitals;
			}
			set
			{
				this._Doctor_Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Doctor_Speciality", Storage="_Doctor_Specialities", ThisKey="Doctor_ID", OtherKey="Doctor_ID")]
		public EntitySet<Doctor_Speciality> Doctor_Specialities
		{
			get
			{
				return this._Doctor_Specialities;
			}
			set
			{
				this._Doctor_Specialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Photo", Storage="_Photos", ThisKey="Doctor_ID", OtherKey="Target_ID")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Doctor_Hospitals(Doctor_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Doctor_Hospitals(Doctor_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Doctor_Specialities(Doctor_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Doctor_Specialities(Doctor_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor_Hospital")]
	public partial class Doctor_Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Doctor_ID;
		
		private int _Hospital_ID;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Hospital> _Hospital;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctor_IDChanging(int value);
    partial void OnDoctor_IDChanged();
    partial void OnHospital_IDChanging(int value);
    partial void OnHospital_IDChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Doctor_Hospital()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Hospital = default(EntityRef<Hospital>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Doctor_ID
		{
			get
			{
				return this._Doctor_ID;
			}
			set
			{
				if ((this._Doctor_ID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctor_IDChanging(value);
					this.SendPropertyChanging();
					this._Doctor_ID = value;
					this.SendPropertyChanged("Doctor_ID");
					this.OnDoctor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Doctor_Hospital", Storage="_Doctor", ThisKey="Doctor_ID", OtherKey="Doctor_ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Doctor_Hospitals.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Doctor_Hospitals.Add(this);
						this._Doctor_ID = value.Doctor_ID;
					}
					else
					{
						this._Doctor_ID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Doctor_Hospital", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Doctor_Hospitals.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Doctor_Hospitals.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(int);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor_Speciality")]
	public partial class Doctor_Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Doctor_ID;
		
		private int _Speciality_ID;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDoctor_IDChanging(int value);
    partial void OnDoctor_IDChanged();
    partial void OnSpeciality_IDChanging(int value);
    partial void OnSpeciality_IDChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Doctor_Speciality()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Doctor_ID
		{
			get
			{
				return this._Doctor_ID;
			}
			set
			{
				if ((this._Doctor_ID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctor_IDChanging(value);
					this.SendPropertyChanging();
					this._Doctor_ID = value;
					this.SendPropertyChanged("Doctor_ID");
					this.OnDoctor_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Speciality_ID
		{
			get
			{
				return this._Speciality_ID;
			}
			set
			{
				if ((this._Speciality_ID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeciality_IDChanging(value);
					this.SendPropertyChanging();
					this._Speciality_ID = value;
					this.SendPropertyChanged("Speciality_ID");
					this.OnSpeciality_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Doctor_Speciality", Storage="_Doctor", ThisKey="Doctor_ID", OtherKey="Doctor_ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Doctor_Specialities.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Doctor_Specialities.Add(this);
						this._Doctor_ID = value.Doctor_ID;
					}
					else
					{
						this._Doctor_ID = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Doctor_Speciality", Storage="_Speciality", ThisKey="Speciality_ID", OtherKey="Speciality_ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.Doctor_Specialities.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.Doctor_Specialities.Add(this);
						this._Speciality_ID = value.Speciality_ID;
					}
					else
					{
						this._Speciality_ID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Facility")]
	public partial class Facility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Facility_ID;
		
		private string _Facility_Name;
		
		private EntitySet<Hospital_Facility> _Hospital_Facilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacility_IDChanging(int value);
    partial void OnFacility_IDChanged();
    partial void OnFacility_NameChanging(string value);
    partial void OnFacility_NameChanged();
    #endregion
		
		public Facility()
		{
			this._Hospital_Facilities = new EntitySet<Hospital_Facility>(new Action<Hospital_Facility>(this.attach_Hospital_Facilities), new Action<Hospital_Facility>(this.detach_Hospital_Facilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Facility_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Facility_ID
		{
			get
			{
				return this._Facility_ID;
			}
			set
			{
				if ((this._Facility_ID != value))
				{
					this.OnFacility_IDChanging(value);
					this.SendPropertyChanging();
					this._Facility_ID = value;
					this.SendPropertyChanged("Facility_ID");
					this.OnFacility_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Facility_Name", DbType="NVarChar(64)")]
		public string Facility_Name
		{
			get
			{
				return this._Facility_Name;
			}
			set
			{
				if ((this._Facility_Name != value))
				{
					this.OnFacility_NameChanging(value);
					this.SendPropertyChanging();
					this._Facility_Name = value;
					this.SendPropertyChanged("Facility_Name");
					this.OnFacility_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_Hospital_Facility", Storage="_Hospital_Facilities", ThisKey="Facility_ID", OtherKey="Facility_ID")]
		public EntitySet<Hospital_Facility> Hospital_Facilities
		{
			get
			{
				return this._Hospital_Facilities;
			}
			set
			{
				this._Hospital_Facilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospital_Facilities(Hospital_Facility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = this;
		}
		
		private void detach_Hospital_Facilities(Hospital_Facility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedback")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Feedback_ID;
		
		private string _Header;
		
		private string _Feedback_Content;
		
		private System.Nullable<int> _Feedback_Type;
		
		private string _Email;
		
		private System.Nullable<int> _Hospital_ID;
		
		private System.Nullable<System.DateTime> _Created_Date;
		
		private EntityRef<FeedbackType> _FeedbackType;
		
		private EntityRef<Hospital> _Hospital;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedback_IDChanging(int value);
    partial void OnFeedback_IDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnFeedback_ContentChanging(string value);
    partial void OnFeedback_ContentChanged();
    partial void OnFeedback_TypeChanging(System.Nullable<int> value);
    partial void OnFeedback_TypeChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnHospital_IDChanging(System.Nullable<int> value);
    partial void OnHospital_IDChanged();
    partial void OnCreated_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreated_DateChanged();
    #endregion
		
		public Feedback()
		{
			this._FeedbackType = default(EntityRef<FeedbackType>);
			this._Hospital = default(EntityRef<Hospital>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Feedback_ID
		{
			get
			{
				return this._Feedback_ID;
			}
			set
			{
				if ((this._Feedback_ID != value))
				{
					this.OnFeedback_IDChanging(value);
					this.SendPropertyChanging();
					this._Feedback_ID = value;
					this.SendPropertyChanged("Feedback_ID");
					this.OnFeedback_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(64)")]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Content", DbType="NVarChar(256)")]
		public string Feedback_Content
		{
			get
			{
				return this._Feedback_Content;
			}
			set
			{
				if ((this._Feedback_Content != value))
				{
					this.OnFeedback_ContentChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Content = value;
					this.SendPropertyChanged("Feedback_Content");
					this.OnFeedback_ContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback_Type", DbType="Int")]
		public System.Nullable<int> Feedback_Type
		{
			get
			{
				return this._Feedback_Type;
			}
			set
			{
				if ((this._Feedback_Type != value))
				{
					if (this._FeedbackType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeedback_TypeChanging(value);
					this.SendPropertyChanging();
					this._Feedback_Type = value;
					this.SendPropertyChanged("Feedback_Type");
					this.OnFeedback_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(64)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int")]
		public System.Nullable<int> Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created_Date
		{
			get
			{
				return this._Created_Date;
			}
			set
			{
				if ((this._Created_Date != value))
				{
					this.OnCreated_DateChanging(value);
					this.SendPropertyChanging();
					this._Created_Date = value;
					this.SendPropertyChanged("Created_Date");
					this.OnCreated_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackType_Feedback", Storage="_FeedbackType", ThisKey="Feedback_Type", OtherKey="Type_ID", IsForeignKey=true)]
		public FeedbackType FeedbackType
		{
			get
			{
				return this._FeedbackType.Entity;
			}
			set
			{
				FeedbackType previousValue = this._FeedbackType.Entity;
				if (((previousValue != value) 
							|| (this._FeedbackType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeedbackType.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._FeedbackType.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._Feedback_Type = value.Type_ID;
					}
					else
					{
						this._Feedback_Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("FeedbackType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Feedback", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedbackType")]
	public partial class FeedbackType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Type_ID;
		
		private string _Type_Name;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntitySet<Feedback> _Feedbacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnType_IDChanging(int value);
    partial void OnType_IDChanged();
    partial void OnType_NameChanging(string value);
    partial void OnType_NameChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public FeedbackType()
		{
			this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Type_ID
		{
			get
			{
				return this._Type_ID;
			}
			set
			{
				if ((this._Type_ID != value))
				{
					this.OnType_IDChanging(value);
					this.SendPropertyChanging();
					this._Type_ID = value;
					this.SendPropertyChanged("Type_ID");
					this.OnType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Name", DbType="NVarChar(256)")]
		public string Type_Name
		{
			get
			{
				return this._Type_Name;
			}
			set
			{
				if ((this._Type_Name != value))
				{
					this.OnType_NameChanging(value);
					this.SendPropertyChanging();
					this._Type_Name = value;
					this.SendPropertyChanged("Type_Name");
					this.OnType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FeedbackType_Feedback", Storage="_Feedbacks", ThisKey="Type_ID", OtherKey="Feedback_Type")]
		public EntitySet<Feedback> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackType = this;
		}
		
		private void detach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.FeedbackType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital")]
	public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Hospital_ID;
		
		private string _Hospital_Name;
		
		private System.Nullable<int> _Hospital_Type;
		
		private string _Address;
		
		private System.Nullable<int> _Ward_ID;
		
		private System.Nullable<int> _District_ID;
		
		private System.Nullable<int> _City_ID;
		
		private string _Phone_Number;
		
		private string _Fax;
		
		private string _Email;
		
		private string _Website;
		
		private System.Nullable<System.TimeSpan> _Start_Time;
		
		private System.Nullable<System.TimeSpan> _End_Time;
		
		private string _Coordinate;
		
		private string _Short_Description;
		
		private string _Full_Description;
		
		private System.Nullable<bool> _Is_Allow_Appointment;
		
		private System.Nullable<int> _Created_Person;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<Doctor_Hospital> _Doctor_Hospitals;
		
		private EntitySet<Feedback> _Feedbacks;
		
		private EntitySet<Hospital_Facility> _Hospital_Facilities;
		
		private EntitySet<Hospital_Service> _Hospital_Services;
		
		private EntitySet<Hospital_Speciality> _Hospital_Specialities;
		
		private EntitySet<Photo> _Photos;
		
		private EntitySet<Rating> _Ratings;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Word_Hospital> _Word_Hospitals;
		
		private EntityRef<City> _City;
		
		private EntityRef<District> _District;
		
		private EntityRef<HospitalType> _HospitalType;
		
		private EntityRef<User> _User;
		
		private EntityRef<Ward> _Ward;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHospital_IDChanging(int value);
    partial void OnHospital_IDChanged();
    partial void OnHospital_NameChanging(string value);
    partial void OnHospital_NameChanged();
    partial void OnHospital_TypeChanging(System.Nullable<int> value);
    partial void OnHospital_TypeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnWard_IDChanging(System.Nullable<int> value);
    partial void OnWard_IDChanged();
    partial void OnDistrict_IDChanging(System.Nullable<int> value);
    partial void OnDistrict_IDChanged();
    partial void OnCity_IDChanging(System.Nullable<int> value);
    partial void OnCity_IDChanged();
    partial void OnPhone_NumberChanging(string value);
    partial void OnPhone_NumberChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnStart_TimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStart_TimeChanged();
    partial void OnEnd_TimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEnd_TimeChanged();
    partial void OnCoordinateChanging(string value);
    partial void OnCoordinateChanged();
    partial void OnShort_DescriptionChanging(string value);
    partial void OnShort_DescriptionChanged();
    partial void OnFull_DescriptionChanging(string value);
    partial void OnFull_DescriptionChanged();
    partial void OnIs_Allow_AppointmentChanging(System.Nullable<bool> value);
    partial void OnIs_Allow_AppointmentChanged();
    partial void OnCreated_PersonChanging(System.Nullable<int> value);
    partial void OnCreated_PersonChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Hospital()
		{
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._Doctor_Hospitals = new EntitySet<Doctor_Hospital>(new Action<Doctor_Hospital>(this.attach_Doctor_Hospitals), new Action<Doctor_Hospital>(this.detach_Doctor_Hospitals));
			this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
			this._Hospital_Facilities = new EntitySet<Hospital_Facility>(new Action<Hospital_Facility>(this.attach_Hospital_Facilities), new Action<Hospital_Facility>(this.detach_Hospital_Facilities));
			this._Hospital_Services = new EntitySet<Hospital_Service>(new Action<Hospital_Service>(this.attach_Hospital_Services), new Action<Hospital_Service>(this.detach_Hospital_Services));
			this._Hospital_Specialities = new EntitySet<Hospital_Speciality>(new Action<Hospital_Speciality>(this.attach_Hospital_Specialities), new Action<Hospital_Speciality>(this.detach_Hospital_Specialities));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Word_Hospitals = new EntitySet<Word_Hospital>(new Action<Word_Hospital>(this.attach_Word_Hospitals), new Action<Word_Hospital>(this.detach_Word_Hospitals));
			this._City = default(EntityRef<City>);
			this._District = default(EntityRef<District>);
			this._HospitalType = default(EntityRef<HospitalType>);
			this._User = default(EntityRef<User>);
			this._Ward = default(EntityRef<Ward>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_Name", DbType="NVarChar(64)")]
		public string Hospital_Name
		{
			get
			{
				return this._Hospital_Name;
			}
			set
			{
				if ((this._Hospital_Name != value))
				{
					this.OnHospital_NameChanging(value);
					this.SendPropertyChanging();
					this._Hospital_Name = value;
					this.SendPropertyChanged("Hospital_Name");
					this.OnHospital_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_Type", DbType="Int")]
		public System.Nullable<int> Hospital_Type
		{
			get
			{
				return this._Hospital_Type;
			}
			set
			{
				if ((this._Hospital_Type != value))
				{
					if (this._HospitalType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_TypeChanging(value);
					this.SendPropertyChanging();
					this._Hospital_Type = value;
					this.SendPropertyChanged("Hospital_Type");
					this.OnHospital_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(128)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward_ID", DbType="Int")]
		public System.Nullable<int> Ward_ID
		{
			get
			{
				return this._Ward_ID;
			}
			set
			{
				if ((this._Ward_ID != value))
				{
					if (this._Ward.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWard_IDChanging(value);
					this.SendPropertyChanging();
					this._Ward_ID = value;
					this.SendPropertyChanged("Ward_ID");
					this.OnWard_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District_ID", DbType="Int")]
		public System.Nullable<int> District_ID
		{
			get
			{
				return this._District_ID;
			}
			set
			{
				if ((this._District_ID != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrict_IDChanging(value);
					this.SendPropertyChanging();
					this._District_ID = value;
					this.SendPropertyChanged("District_ID");
					this.OnDistrict_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City_ID", DbType="Int")]
		public System.Nullable<int> City_ID
		{
			get
			{
				return this._City_ID;
			}
			set
			{
				if ((this._City_ID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCity_IDChanging(value);
					this.SendPropertyChanging();
					this._City_ID = value;
					this.SendPropertyChanged("City_ID");
					this.OnCity_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Number", DbType="VarChar(32)")]
		public string Phone_Number
		{
			get
			{
				return this._Phone_Number;
			}
			set
			{
				if ((this._Phone_Number != value))
				{
					this.OnPhone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Phone_Number = value;
					this.SendPropertyChanged("Phone_Number");
					this.OnPhone_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(16)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(64)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(64)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> Start_Time
		{
			get
			{
				return this._Start_Time;
			}
			set
			{
				if ((this._Start_Time != value))
				{
					this.OnStart_TimeChanging(value);
					this.SendPropertyChanging();
					this._Start_Time = value;
					this.SendPropertyChanged("Start_Time");
					this.OnStart_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_Time", DbType="Time")]
		public System.Nullable<System.TimeSpan> End_Time
		{
			get
			{
				return this._End_Time;
			}
			set
			{
				if ((this._End_Time != value))
				{
					this.OnEnd_TimeChanging(value);
					this.SendPropertyChanging();
					this._End_Time = value;
					this.SendPropertyChanged("End_Time");
					this.OnEnd_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coordinate", DbType="VarChar(26)")]
		public string Coordinate
		{
			get
			{
				return this._Coordinate;
			}
			set
			{
				if ((this._Coordinate != value))
				{
					this.OnCoordinateChanging(value);
					this.SendPropertyChanging();
					this._Coordinate = value;
					this.SendPropertyChanged("Coordinate");
					this.OnCoordinateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Short_Description", DbType="NVarChar(64)")]
		public string Short_Description
		{
			get
			{
				return this._Short_Description;
			}
			set
			{
				if ((this._Short_Description != value))
				{
					this.OnShort_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Short_Description = value;
					this.SendPropertyChanged("Short_Description");
					this.OnShort_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Full_Description", DbType="NVarChar(1024)")]
		public string Full_Description
		{
			get
			{
				return this._Full_Description;
			}
			set
			{
				if ((this._Full_Description != value))
				{
					this.OnFull_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Full_Description = value;
					this.SendPropertyChanged("Full_Description");
					this.OnFull_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Allow_Appointment", DbType="Bit")]
		public System.Nullable<bool> Is_Allow_Appointment
		{
			get
			{
				return this._Is_Allow_Appointment;
			}
			set
			{
				if ((this._Is_Allow_Appointment != value))
				{
					this.OnIs_Allow_AppointmentChanging(value);
					this.SendPropertyChanging();
					this._Is_Allow_Appointment = value;
					this.SendPropertyChanged("Is_Allow_Appointment");
					this.OnIs_Allow_AppointmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created_Person", DbType="Int")]
		public System.Nullable<int> Created_Person
		{
			get
			{
				return this._Created_Person;
			}
			set
			{
				if ((this._Created_Person != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreated_PersonChanging(value);
					this.SendPropertyChanging();
					this._Created_Person = value;
					this.SendPropertyChanged("Created_Person");
					this.OnCreated_PersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Appointment", Storage="_Appointments", ThisKey="Hospital_ID", OtherKey="Curing_Hospital")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Doctor_Hospital", Storage="_Doctor_Hospitals", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<Doctor_Hospital> Doctor_Hospitals
		{
			get
			{
				return this._Doctor_Hospitals;
			}
			set
			{
				this._Doctor_Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Feedback", Storage="_Feedbacks", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<Feedback> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Hospital_Facility", Storage="_Hospital_Facilities", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<Hospital_Facility> Hospital_Facilities
		{
			get
			{
				return this._Hospital_Facilities;
			}
			set
			{
				this._Hospital_Facilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Hospital_Service", Storage="_Hospital_Services", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<Hospital_Service> Hospital_Services
		{
			get
			{
				return this._Hospital_Services;
			}
			set
			{
				this._Hospital_Services.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Hospital_Speciality", Storage="_Hospital_Specialities", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<Hospital_Speciality> Hospital_Specialities
		{
			get
			{
				return this._Hospital_Specialities;
			}
			set
			{
				this._Hospital_Specialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Photo", Storage="_Photos", ThisKey="Hospital_ID", OtherKey="Target_ID")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Rating", Storage="_Ratings", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_User", Storage="_Users", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Word_Hospital", Storage="_Word_Hospitals", ThisKey="Hospital_ID", OtherKey="Hospital_ID")]
		public EntitySet<Word_Hospital> Word_Hospitals
		{
			get
			{
				return this._Word_Hospitals;
			}
			set
			{
				this._Word_Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Hospital", Storage="_City", ThisKey="City_ID", OtherKey="City_ID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._City_ID = value.City_ID;
					}
					else
					{
						this._City_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Hospital", Storage="_District", ThisKey="District_ID", OtherKey="District_ID", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._District_ID = value.District_ID;
					}
					else
					{
						this._District_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HospitalType_Hospital", Storage="_HospitalType", ThisKey="Hospital_Type", OtherKey="Type_ID", IsForeignKey=true)]
		public HospitalType HospitalType
		{
			get
			{
				return this._HospitalType.Entity;
			}
			set
			{
				HospitalType previousValue = this._HospitalType.Entity;
				if (((previousValue != value) 
							|| (this._HospitalType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HospitalType.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._HospitalType.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._Hospital_Type = value.Type_ID;
					}
					else
					{
						this._Hospital_Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("HospitalType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hospital", Storage="_User", ThisKey="Created_Person", OtherKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._Created_Person = value.User_ID;
					}
					else
					{
						this._Created_Person = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Hospital", Storage="_Ward", ThisKey="Ward_ID", OtherKey="Ward_ID", IsForeignKey=true)]
		public Ward Ward
		{
			get
			{
				return this._Ward.Entity;
			}
			set
			{
				Ward previousValue = this._Ward.Entity;
				if (((previousValue != value) 
							|| (this._Ward.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ward.Entity = null;
						previousValue.Hospitals.Remove(this);
					}
					this._Ward.Entity = value;
					if ((value != null))
					{
						value.Hospitals.Add(this);
						this._Ward_ID = value.Ward_ID;
					}
					else
					{
						this._Ward_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ward");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Doctor_Hospitals(Doctor_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Doctor_Hospitals(Doctor_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Hospital_Facilities(Hospital_Facility entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Hospital_Facilities(Hospital_Facility entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Hospital_Services(Hospital_Service entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Hospital_Services(Hospital_Service entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Hospital_Specialities(Hospital_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Hospital_Specialities(Hospital_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
		
		private void attach_Word_Hospitals(Word_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = this;
		}
		
		private void detach_Word_Hospitals(Word_Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Hospital = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital_Facility")]
	public partial class Hospital_Facility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Hospital_ID;
		
		private int _Facility_ID;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntityRef<Facility> _Facility;
		
		private EntityRef<Hospital> _Hospital;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHospital_IDChanging(int value);
    partial void OnHospital_IDChanged();
    partial void OnFacility_IDChanging(int value);
    partial void OnFacility_IDChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Hospital_Facility()
		{
			this._Facility = default(EntityRef<Facility>);
			this._Hospital = default(EntityRef<Hospital>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Facility_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Facility_ID
		{
			get
			{
				return this._Facility_ID;
			}
			set
			{
				if ((this._Facility_ID != value))
				{
					if (this._Facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacility_IDChanging(value);
					this.SendPropertyChanging();
					this._Facility_ID = value;
					this.SendPropertyChanged("Facility_ID");
					this.OnFacility_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_Hospital_Facility", Storage="_Facility", ThisKey="Facility_ID", OtherKey="Facility_ID", IsForeignKey=true)]
		public Facility Facility
		{
			get
			{
				return this._Facility.Entity;
			}
			set
			{
				Facility previousValue = this._Facility.Entity;
				if (((previousValue != value) 
							|| (this._Facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Facility.Entity = null;
						previousValue.Hospital_Facilities.Remove(this);
					}
					this._Facility.Entity = value;
					if ((value != null))
					{
						value.Hospital_Facilities.Add(this);
						this._Facility_ID = value.Facility_ID;
					}
					else
					{
						this._Facility_ID = default(int);
					}
					this.SendPropertyChanged("Facility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Hospital_Facility", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Hospital_Facilities.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Hospital_Facilities.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(int);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital_Service")]
	public partial class Hospital_Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Hospital_ID;
		
		private int _Service_ID;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHospital_IDChanging(int value);
    partial void OnHospital_IDChanged();
    partial void OnService_IDChanging(int value);
    partial void OnService_IDChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Hospital_Service()
		{
			this._Hospital = default(EntityRef<Hospital>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Service_ID
		{
			get
			{
				return this._Service_ID;
			}
			set
			{
				if ((this._Service_ID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnService_IDChanging(value);
					this.SendPropertyChanging();
					this._Service_ID = value;
					this.SendPropertyChanged("Service_ID");
					this.OnService_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Hospital_Service", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Hospital_Services.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Hospital_Services.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(int);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Hospital_Service", Storage="_Service", ThisKey="Service_ID", OtherKey="Service_ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Hospital_Services.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Hospital_Services.Add(this);
						this._Service_ID = value.Service_ID;
					}
					else
					{
						this._Service_ID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital_Speciality")]
	public partial class Hospital_Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Hospital_ID;
		
		private int _Speciality_ID;
		
		private System.Nullable<bool> _Is_Main_Speciality;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHospital_IDChanging(int value);
    partial void OnHospital_IDChanged();
    partial void OnSpeciality_IDChanging(int value);
    partial void OnSpeciality_IDChanged();
    partial void OnIs_Main_SpecialityChanging(System.Nullable<bool> value);
    partial void OnIs_Main_SpecialityChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Hospital_Speciality()
		{
			this._Hospital = default(EntityRef<Hospital>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Speciality_ID
		{
			get
			{
				return this._Speciality_ID;
			}
			set
			{
				if ((this._Speciality_ID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeciality_IDChanging(value);
					this.SendPropertyChanging();
					this._Speciality_ID = value;
					this.SendPropertyChanged("Speciality_ID");
					this.OnSpeciality_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Main_Speciality", DbType="Bit")]
		public System.Nullable<bool> Is_Main_Speciality
		{
			get
			{
				return this._Is_Main_Speciality;
			}
			set
			{
				if ((this._Is_Main_Speciality != value))
				{
					this.OnIs_Main_SpecialityChanging(value);
					this.SendPropertyChanging();
					this._Is_Main_Speciality = value;
					this.SendPropertyChanged("Is_Main_Speciality");
					this.OnIs_Main_SpecialityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Hospital_Speciality", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Hospital_Specialities.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Hospital_Specialities.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(int);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Hospital_Speciality", Storage="_Speciality", ThisKey="Speciality_ID", OtherKey="Speciality_ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.Hospital_Specialities.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.Hospital_Specialities.Add(this);
						this._Speciality_ID = value.Speciality_ID;
					}
					else
					{
						this._Speciality_ID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HospitalType")]
	public partial class HospitalType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Type_ID;
		
		private string _Type_Name;
		
		private EntitySet<Hospital> _Hospitals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnType_IDChanging(int value);
    partial void OnType_IDChanged();
    partial void OnType_NameChanging(string value);
    partial void OnType_NameChanged();
    #endregion
		
		public HospitalType()
		{
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Type_ID
		{
			get
			{
				return this._Type_ID;
			}
			set
			{
				if ((this._Type_ID != value))
				{
					this.OnType_IDChanging(value);
					this.SendPropertyChanging();
					this._Type_ID = value;
					this.SendPropertyChanged("Type_ID");
					this.OnType_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_Name", DbType="NVarChar(32)")]
		public string Type_Name
		{
			get
			{
				return this._Type_Name;
			}
			set
			{
				if ((this._Type_Name != value))
				{
					this.OnType_NameChanging(value);
					this.SendPropertyChanging();
					this._Type_Name = value;
					this.SendPropertyChanged("Type_Name");
					this.OnType_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HospitalType_Hospital", Storage="_Hospitals", ThisKey="Type_ID", OtherKey="Hospital_Type")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.HospitalType = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.HospitalType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Photo_ID;
		
		private string _File_Path;
		
		private string _Caption;
		
		private System.Nullable<System.DateTime> _Add_Date;
		
		private System.Nullable<int> _Target_Type;
		
		private System.Nullable<int> _Target_ID;
		
		private System.Nullable<int> _Uploaded_Person;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoto_IDChanging(int value);
    partial void OnPhoto_IDChanged();
    partial void OnFile_PathChanging(string value);
    partial void OnFile_PathChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnAdd_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnAdd_DateChanged();
    partial void OnTarget_TypeChanging(System.Nullable<int> value);
    partial void OnTarget_TypeChanged();
    partial void OnTarget_IDChanging(System.Nullable<int> value);
    partial void OnTarget_IDChanged();
    partial void OnUploaded_PersonChanging(System.Nullable<int> value);
    partial void OnUploaded_PersonChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public Photo()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Hospital = default(EntityRef<Hospital>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Photo_ID
		{
			get
			{
				return this._Photo_ID;
			}
			set
			{
				if ((this._Photo_ID != value))
				{
					this.OnPhoto_IDChanging(value);
					this.SendPropertyChanging();
					this._Photo_ID = value;
					this.SendPropertyChanged("Photo_ID");
					this.OnPhoto_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_File_Path", DbType="VarChar(128)")]
		public string File_Path
		{
			get
			{
				return this._File_Path;
			}
			set
			{
				if ((this._File_Path != value))
				{
					this.OnFile_PathChanging(value);
					this.SendPropertyChanging();
					this._File_Path = value;
					this.SendPropertyChanged("File_Path");
					this.OnFile_PathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(128)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Add_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Add_Date
		{
			get
			{
				return this._Add_Date;
			}
			set
			{
				if ((this._Add_Date != value))
				{
					this.OnAdd_DateChanging(value);
					this.SendPropertyChanging();
					this._Add_Date = value;
					this.SendPropertyChanged("Add_Date");
					this.OnAdd_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Target_Type", DbType="Int")]
		public System.Nullable<int> Target_Type
		{
			get
			{
				return this._Target_Type;
			}
			set
			{
				if ((this._Target_Type != value))
				{
					this.OnTarget_TypeChanging(value);
					this.SendPropertyChanging();
					this._Target_Type = value;
					this.SendPropertyChanged("Target_Type");
					this.OnTarget_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Target_ID", DbType="Int")]
		public System.Nullable<int> Target_ID
		{
			get
			{
				return this._Target_ID;
			}
			set
			{
				if ((this._Target_ID != value))
				{
					if ((this._Doctor.HasLoadedOrAssignedValue || this._Hospital.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTarget_IDChanging(value);
					this.SendPropertyChanging();
					this._Target_ID = value;
					this.SendPropertyChanged("Target_ID");
					this.OnTarget_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uploaded_Person", DbType="Int")]
		public System.Nullable<int> Uploaded_Person
		{
			get
			{
				return this._Uploaded_Person;
			}
			set
			{
				if ((this._Uploaded_Person != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploaded_PersonChanging(value);
					this.SendPropertyChanging();
					this._Uploaded_Person = value;
					this.SendPropertyChanged("Uploaded_Person");
					this.OnUploaded_PersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Photo", Storage="_Doctor", ThisKey="Target_ID", OtherKey="Doctor_ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._Target_ID = value.Doctor_ID;
					}
					else
					{
						this._Target_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Photo", Storage="_Hospital", ThisKey="Target_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._Target_ID = value.Hospital_ID;
					}
					else
					{
						this._Target_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Photo", Storage="_User", ThisKey="Uploaded_Person", OtherKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Photos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Photos.Add(this);
						this._Uploaded_Person = value.User_ID;
					}
					else
					{
						this._Uploaded_Person = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rating")]
	public partial class Rating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Rating_ID;
		
		private System.Nullable<int> _Score;
		
		private System.Nullable<int> _Hospital_ID;
		
		private System.Nullable<int> _Created_Person;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRating_IDChanging(int value);
    partial void OnRating_IDChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnHospital_IDChanging(System.Nullable<int> value);
    partial void OnHospital_IDChanged();
    partial void OnCreated_PersonChanging(System.Nullable<int> value);
    partial void OnCreated_PersonChanged();
    #endregion
		
		public Rating()
		{
			this._Hospital = default(EntityRef<Hospital>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Rating_ID
		{
			get
			{
				return this._Rating_ID;
			}
			set
			{
				if ((this._Rating_ID != value))
				{
					this.OnRating_IDChanging(value);
					this.SendPropertyChanging();
					this._Rating_ID = value;
					this.SendPropertyChanged("Rating_ID");
					this.OnRating_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int")]
		public System.Nullable<int> Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created_Person", DbType="Int")]
		public System.Nullable<int> Created_Person
		{
			get
			{
				return this._Created_Person;
			}
			set
			{
				if ((this._Created_Person != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreated_PersonChanging(value);
					this.SendPropertyChanging();
					this._Created_Person = value;
					this.SendPropertyChanged("Created_Person");
					this.OnCreated_PersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Rating", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_User", ThisKey="Created_Person", OtherKey="User_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Ratings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Ratings.Add(this);
						this._Created_Person = value.User_ID;
					}
					else
					{
						this._Created_Person = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_ID;
		
		private string _Role_Name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IDChanging(int value);
    partial void OnRole_IDChanged();
    partial void OnRole_NameChanging(string value);
    partial void OnRole_NameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Name", DbType="NVarChar(32)")]
		public string Role_Name
		{
			get
			{
				return this._Role_Name;
			}
			set
			{
				if ((this._Role_Name != value))
				{
					this.OnRole_NameChanging(value);
					this.SendPropertyChanging();
					this._Role_Name = value;
					this.SendPropertyChanged("Role_Name");
					this.OnRole_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="Role_ID", OtherKey="Role_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sentence_Word")]
	public partial class Sentence_Word : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Sentence_ID;
		
		private int _Word_ID;
		
		private System.Nullable<System.DateTime> _Added_Date;
		
		private EntityRef<WordDictionary> _WordDictionary;
		
		private EntityRef<SentenceDictionary> _SentenceDictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSentence_IDChanging(int value);
    partial void OnSentence_IDChanged();
    partial void OnWord_IDChanging(int value);
    partial void OnWord_IDChanged();
    partial void OnAdded_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnAdded_DateChanged();
    #endregion
		
		public Sentence_Word()
		{
			this._WordDictionary = default(EntityRef<WordDictionary>);
			this._SentenceDictionary = default(EntityRef<SentenceDictionary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sentence_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Sentence_ID
		{
			get
			{
				return this._Sentence_ID;
			}
			set
			{
				if ((this._Sentence_ID != value))
				{
					if (this._SentenceDictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSentence_IDChanging(value);
					this.SendPropertyChanging();
					this._Sentence_ID = value;
					this.SendPropertyChanged("Sentence_ID");
					this.OnSentence_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Word_ID
		{
			get
			{
				return this._Word_ID;
			}
			set
			{
				if ((this._Word_ID != value))
				{
					if (this._WordDictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWord_IDChanging(value);
					this.SendPropertyChanging();
					this._Word_ID = value;
					this.SendPropertyChanged("Word_ID");
					this.OnWord_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Added_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Added_Date
		{
			get
			{
				return this._Added_Date;
			}
			set
			{
				if ((this._Added_Date != value))
				{
					this.OnAdded_DateChanging(value);
					this.SendPropertyChanging();
					this._Added_Date = value;
					this.SendPropertyChanged("Added_Date");
					this.OnAdded_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordDictionary_Sentence_Word", Storage="_WordDictionary", ThisKey="Word_ID", OtherKey="Word_ID", IsForeignKey=true)]
		public WordDictionary WordDictionary
		{
			get
			{
				return this._WordDictionary.Entity;
			}
			set
			{
				WordDictionary previousValue = this._WordDictionary.Entity;
				if (((previousValue != value) 
							|| (this._WordDictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WordDictionary.Entity = null;
						previousValue.Sentence_Words.Remove(this);
					}
					this._WordDictionary.Entity = value;
					if ((value != null))
					{
						value.Sentence_Words.Add(this);
						this._Word_ID = value.Word_ID;
					}
					else
					{
						this._Word_ID = default(int);
					}
					this.SendPropertyChanged("WordDictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SentenceDictionary_Sentence_Word", Storage="_SentenceDictionary", ThisKey="Sentence_ID", OtherKey="Sentence_ID", IsForeignKey=true)]
		public SentenceDictionary SentenceDictionary
		{
			get
			{
				return this._SentenceDictionary.Entity;
			}
			set
			{
				SentenceDictionary previousValue = this._SentenceDictionary.Entity;
				if (((previousValue != value) 
							|| (this._SentenceDictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SentenceDictionary.Entity = null;
						previousValue.Sentence_Words.Remove(this);
					}
					this._SentenceDictionary.Entity = value;
					if ((value != null))
					{
						value.Sentence_Words.Add(this);
						this._Sentence_ID = value.Sentence_ID;
					}
					else
					{
						this._Sentence_ID = default(int);
					}
					this.SendPropertyChanged("SentenceDictionary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SentenceDictionary")]
	public partial class SentenceDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Sentence_ID;
		
		private string _Sentence;
		
		private System.Nullable<System.DateTime> _Search_Date;
		
		private EntitySet<Sentence_Word> _Sentence_Words;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSentence_IDChanging(int value);
    partial void OnSentence_IDChanged();
    partial void OnSentenceChanging(string value);
    partial void OnSentenceChanged();
    partial void OnSearch_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnSearch_DateChanged();
    #endregion
		
		public SentenceDictionary()
		{
			this._Sentence_Words = new EntitySet<Sentence_Word>(new Action<Sentence_Word>(this.attach_Sentence_Words), new Action<Sentence_Word>(this.detach_Sentence_Words));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sentence_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Sentence_ID
		{
			get
			{
				return this._Sentence_ID;
			}
			set
			{
				if ((this._Sentence_ID != value))
				{
					this.OnSentence_IDChanging(value);
					this.SendPropertyChanging();
					this._Sentence_ID = value;
					this.SendPropertyChanged("Sentence_ID");
					this.OnSentence_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sentence", DbType="NVarChar(64)")]
		public string Sentence
		{
			get
			{
				return this._Sentence;
			}
			set
			{
				if ((this._Sentence != value))
				{
					this.OnSentenceChanging(value);
					this.SendPropertyChanging();
					this._Sentence = value;
					this.SendPropertyChanged("Sentence");
					this.OnSentenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Search_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Search_Date
		{
			get
			{
				return this._Search_Date;
			}
			set
			{
				if ((this._Search_Date != value))
				{
					this.OnSearch_DateChanging(value);
					this.SendPropertyChanging();
					this._Search_Date = value;
					this.SendPropertyChanged("Search_Date");
					this.OnSearch_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SentenceDictionary_Sentence_Word", Storage="_Sentence_Words", ThisKey="Sentence_ID", OtherKey="Sentence_ID")]
		public EntitySet<Sentence_Word> Sentence_Words
		{
			get
			{
				return this._Sentence_Words;
			}
			set
			{
				this._Sentence_Words.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sentence_Words(Sentence_Word entity)
		{
			this.SendPropertyChanging();
			entity.SentenceDictionary = this;
		}
		
		private void detach_Sentence_Words(Sentence_Word entity)
		{
			this.SendPropertyChanging();
			entity.SentenceDictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Service_ID;
		
		private string _Service_Name;
		
		private EntitySet<Hospital_Service> _Hospital_Services;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnService_IDChanging(int value);
    partial void OnService_IDChanged();
    partial void OnService_NameChanging(string value);
    partial void OnService_NameChanged();
    #endregion
		
		public Service()
		{
			this._Hospital_Services = new EntitySet<Hospital_Service>(new Action<Hospital_Service>(this.attach_Hospital_Services), new Action<Hospital_Service>(this.detach_Hospital_Services));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Service_ID
		{
			get
			{
				return this._Service_ID;
			}
			set
			{
				if ((this._Service_ID != value))
				{
					this.OnService_IDChanging(value);
					this.SendPropertyChanging();
					this._Service_ID = value;
					this.SendPropertyChanged("Service_ID");
					this.OnService_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_Name", DbType="NVarChar(64)")]
		public string Service_Name
		{
			get
			{
				return this._Service_Name;
			}
			set
			{
				if ((this._Service_Name != value))
				{
					this.OnService_NameChanging(value);
					this.SendPropertyChanging();
					this._Service_Name = value;
					this.SendPropertyChanged("Service_Name");
					this.OnService_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Hospital_Service", Storage="_Hospital_Services", ThisKey="Service_ID", OtherKey="Service_ID")]
		public EntitySet<Hospital_Service> Hospital_Services
		{
			get
			{
				return this._Hospital_Services;
			}
			set
			{
				this._Hospital_Services.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospital_Services(Hospital_Service entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Hospital_Services(Hospital_Service entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speciality")]
	public partial class Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Speciality_ID;
		
		private string _Speciality_Name;
		
		private EntitySet<Doctor_Speciality> _Doctor_Specialities;
		
		private EntitySet<Hospital_Speciality> _Hospital_Specialities;
		
		private EntitySet<Speciality_Disease> _Speciality_Diseases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpeciality_IDChanging(int value);
    partial void OnSpeciality_IDChanged();
    partial void OnSpeciality_NameChanging(string value);
    partial void OnSpeciality_NameChanged();
    #endregion
		
		public Speciality()
		{
			this._Doctor_Specialities = new EntitySet<Doctor_Speciality>(new Action<Doctor_Speciality>(this.attach_Doctor_Specialities), new Action<Doctor_Speciality>(this.detach_Doctor_Specialities));
			this._Hospital_Specialities = new EntitySet<Hospital_Speciality>(new Action<Hospital_Speciality>(this.attach_Hospital_Specialities), new Action<Hospital_Speciality>(this.detach_Hospital_Specialities));
			this._Speciality_Diseases = new EntitySet<Speciality_Disease>(new Action<Speciality_Disease>(this.attach_Speciality_Diseases), new Action<Speciality_Disease>(this.detach_Speciality_Diseases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Speciality_ID
		{
			get
			{
				return this._Speciality_ID;
			}
			set
			{
				if ((this._Speciality_ID != value))
				{
					this.OnSpeciality_IDChanging(value);
					this.SendPropertyChanging();
					this._Speciality_ID = value;
					this.SendPropertyChanged("Speciality_ID");
					this.OnSpeciality_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality_Name", DbType="NVarChar(32)")]
		public string Speciality_Name
		{
			get
			{
				return this._Speciality_Name;
			}
			set
			{
				if ((this._Speciality_Name != value))
				{
					this.OnSpeciality_NameChanging(value);
					this.SendPropertyChanging();
					this._Speciality_Name = value;
					this.SendPropertyChanged("Speciality_Name");
					this.OnSpeciality_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Doctor_Speciality", Storage="_Doctor_Specialities", ThisKey="Speciality_ID", OtherKey="Speciality_ID")]
		public EntitySet<Doctor_Speciality> Doctor_Specialities
		{
			get
			{
				return this._Doctor_Specialities;
			}
			set
			{
				this._Doctor_Specialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Hospital_Speciality", Storage="_Hospital_Specialities", ThisKey="Speciality_ID", OtherKey="Speciality_ID")]
		public EntitySet<Hospital_Speciality> Hospital_Specialities
		{
			get
			{
				return this._Hospital_Specialities;
			}
			set
			{
				this._Hospital_Specialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Speciality_Disease", Storage="_Speciality_Diseases", ThisKey="Speciality_ID", OtherKey="Speciality_ID")]
		public EntitySet<Speciality_Disease> Speciality_Diseases
		{
			get
			{
				return this._Speciality_Diseases;
			}
			set
			{
				this._Speciality_Diseases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctor_Specialities(Doctor_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_Doctor_Specialities(Doctor_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_Hospital_Specialities(Hospital_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_Hospital_Specialities(Hospital_Speciality entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
		
		private void attach_Speciality_Diseases(Speciality_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_Speciality_Diseases(Speciality_Disease entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speciality_Disease")]
	public partial class Speciality_Disease : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Speciality_ID;
		
		private int _Disease_ID;
		
		private EntityRef<Disease> _Disease;
		
		private EntityRef<Speciality> _Speciality;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpeciality_IDChanging(int value);
    partial void OnSpeciality_IDChanged();
    partial void OnDisease_IDChanging(int value);
    partial void OnDisease_IDChanged();
    #endregion
		
		public Speciality_Disease()
		{
			this._Disease = default(EntityRef<Disease>);
			this._Speciality = default(EntityRef<Speciality>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Speciality_ID
		{
			get
			{
				return this._Speciality_ID;
			}
			set
			{
				if ((this._Speciality_ID != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeciality_IDChanging(value);
					this.SendPropertyChanging();
					this._Speciality_ID = value;
					this.SendPropertyChanged("Speciality_ID");
					this.OnSpeciality_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Disease_ID
		{
			get
			{
				return this._Disease_ID;
			}
			set
			{
				if ((this._Disease_ID != value))
				{
					if (this._Disease.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisease_IDChanging(value);
					this.SendPropertyChanging();
					this._Disease_ID = value;
					this.SendPropertyChanged("Disease_ID");
					this.OnDisease_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Disease_Speciality_Disease", Storage="_Disease", ThisKey="Disease_ID", OtherKey="Disease_ID", IsForeignKey=true)]
		public Disease Disease
		{
			get
			{
				return this._Disease.Entity;
			}
			set
			{
				Disease previousValue = this._Disease.Entity;
				if (((previousValue != value) 
							|| (this._Disease.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Disease.Entity = null;
						previousValue.Speciality_Diseases.Remove(this);
					}
					this._Disease.Entity = value;
					if ((value != null))
					{
						value.Speciality_Diseases.Add(this);
						this._Disease_ID = value.Disease_ID;
					}
					else
					{
						this._Disease_ID = default(int);
					}
					this.SendPropertyChanged("Disease");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_Speciality_Disease", Storage="_Speciality", ThisKey="Speciality_ID", OtherKey="Speciality_ID", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.Speciality_Diseases.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.Speciality_Diseases.Add(this);
						this._Speciality_ID = value.Speciality_ID;
					}
					else
					{
						this._Speciality_ID = default(int);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _Email;
		
		private string _Password;
		
		private string _Secondary_Email;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _Phone_Number;
		
		private System.Nullable<int> _Role_ID;
		
		private System.Nullable<int> _Confirmed_Person;
		
		private System.Nullable<int> _Hospital_ID;
		
		private System.Nullable<bool> _Is_Active;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntitySet<Photo> _Photos;
		
		private EntitySet<Rating> _Ratings;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSecondary_EmailChanging(string value);
    partial void OnSecondary_EmailChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnPhone_NumberChanging(string value);
    partial void OnPhone_NumberChanged();
    partial void OnRole_IDChanging(System.Nullable<int> value);
    partial void OnRole_IDChanged();
    partial void OnConfirmed_PersonChanging(System.Nullable<int> value);
    partial void OnConfirmed_PersonChanged();
    partial void OnHospital_IDChanging(System.Nullable<int> value);
    partial void OnHospital_IDChanged();
    partial void OnIs_ActiveChanging(System.Nullable<bool> value);
    partial void OnIs_ActiveChanged();
    #endregion
		
		public User()
		{
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._Photos = new EntitySet<Photo>(new Action<Photo>(this.attach_Photos), new Action<Photo>(this.detach_Photos));
			this._Ratings = new EntitySet<Rating>(new Action<Rating>(this.attach_Ratings), new Action<Rating>(this.detach_Ratings));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Hospital = default(EntityRef<Hospital>);
			this._Role = default(EntityRef<Role>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(64)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(32)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Secondary_Email", DbType="VarChar(64)")]
		public string Secondary_Email
		{
			get
			{
				return this._Secondary_Email;
			}
			set
			{
				if ((this._Secondary_Email != value))
				{
					this.OnSecondary_EmailChanging(value);
					this.SendPropertyChanging();
					this._Secondary_Email = value;
					this.SendPropertyChanged("Secondary_Email");
					this.OnSecondary_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="NVarChar(16)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="NVarChar(16)")]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Number", DbType="VarChar(13)")]
		public string Phone_Number
		{
			get
			{
				return this._Phone_Number;
			}
			set
			{
				if ((this._Phone_Number != value))
				{
					this.OnPhone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Phone_Number = value;
					this.SendPropertyChanged("Phone_Number");
					this.OnPhone_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="Int")]
		public System.Nullable<int> Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed_Person", DbType="Int")]
		public System.Nullable<int> Confirmed_Person
		{
			get
			{
				return this._Confirmed_Person;
			}
			set
			{
				if ((this._Confirmed_Person != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConfirmed_PersonChanging(value);
					this.SendPropertyChanging();
					this._Confirmed_Person = value;
					this.SendPropertyChanged("Confirmed_Person");
					this.OnConfirmed_PersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int")]
		public System.Nullable<int> Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit")]
		public System.Nullable<bool> Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Hospital", Storage="_Hospitals", ThisKey="User_ID", OtherKey="Created_Person")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Photo", Storage="_Photos", ThisKey="User_ID", OtherKey="Uploaded_Person")]
		public EntitySet<Photo> Photos
		{
			get
			{
				return this._Photos;
			}
			set
			{
				this._Photos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Rating", Storage="_Ratings", ThisKey="User_ID", OtherKey="Created_Person")]
		public EntitySet<Rating> Ratings
		{
			get
			{
				return this._Ratings;
			}
			set
			{
				this._Ratings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User", Storage="_Users", ThisKey="User_ID", OtherKey="Confirmed_Person")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_User", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="Role_ID", OtherKey="Role_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Role_ID = value.Role_ID;
					}
					else
					{
						this._Role_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User", Storage="_User1", ThisKey="Confirmed_Person", OtherKey="User_ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Confirmed_Person = value.User_ID;
					}
					else
					{
						this._Confirmed_Person = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Photos(Photo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Ratings(Rating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ward")]
	public partial class Ward : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ward_ID;
		
		private string _Ward_Name;
		
		private string _Type;
		
		private string _Coordinate;
		
		private System.Nullable<int> _District_ID;
		
		private EntitySet<Hospital> _Hospitals;
		
		private EntityRef<District> _District;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWard_IDChanging(int value);
    partial void OnWard_IDChanged();
    partial void OnWard_NameChanging(string value);
    partial void OnWard_NameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCoordinateChanging(string value);
    partial void OnCoordinateChanged();
    partial void OnDistrict_IDChanging(System.Nullable<int> value);
    partial void OnDistrict_IDChanged();
    #endregion
		
		public Ward()
		{
			this._Hospitals = new EntitySet<Hospital>(new Action<Hospital>(this.attach_Hospitals), new Action<Hospital>(this.detach_Hospitals));
			this._District = default(EntityRef<District>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ward_ID
		{
			get
			{
				return this._Ward_ID;
			}
			set
			{
				if ((this._Ward_ID != value))
				{
					this.OnWard_IDChanging(value);
					this.SendPropertyChanging();
					this._Ward_ID = value;
					this.SendPropertyChanged("Ward_ID");
					this.OnWard_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ward_Name", DbType="NVarChar(32)")]
		public string Ward_Name
		{
			get
			{
				return this._Ward_Name;
			}
			set
			{
				if ((this._Ward_Name != value))
				{
					this.OnWard_NameChanging(value);
					this.SendPropertyChanging();
					this._Ward_Name = value;
					this.SendPropertyChanged("Ward_Name");
					this.OnWard_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(9)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coordinate", DbType="VarChar(26)")]
		public string Coordinate
		{
			get
			{
				return this._Coordinate;
			}
			set
			{
				if ((this._Coordinate != value))
				{
					this.OnCoordinateChanging(value);
					this.SendPropertyChanging();
					this._Coordinate = value;
					this.SendPropertyChanged("Coordinate");
					this.OnCoordinateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District_ID", DbType="Int")]
		public System.Nullable<int> District_ID
		{
			get
			{
				return this._District_ID;
			}
			set
			{
				if ((this._District_ID != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrict_IDChanging(value);
					this.SendPropertyChanging();
					this._District_ID = value;
					this.SendPropertyChanged("District_ID");
					this.OnDistrict_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ward_Hospital", Storage="_Hospitals", ThisKey="Ward_ID", OtherKey="Ward_ID")]
		public EntitySet<Hospital> Hospitals
		{
			get
			{
				return this._Hospitals;
			}
			set
			{
				this._Hospitals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_Ward", Storage="_District", ThisKey="District_ID", OtherKey="District_ID", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.Wards.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.Wards.Add(this);
						this._District_ID = value.District_ID;
					}
					else
					{
						this._District_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Ward = this;
		}
		
		private void detach_Hospitals(Hospital entity)
		{
			this.SendPropertyChanging();
			entity.Ward = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Word_Hospital")]
	public partial class Word_Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Word_ID;
		
		private int _Hospital_ID;
		
		private EntityRef<Hospital> _Hospital;
		
		private EntityRef<WordDictionary> _WordDictionary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWord_IDChanging(int value);
    partial void OnWord_IDChanged();
    partial void OnHospital_IDChanging(int value);
    partial void OnHospital_IDChanged();
    #endregion
		
		public Word_Hospital()
		{
			this._Hospital = default(EntityRef<Hospital>);
			this._WordDictionary = default(EntityRef<WordDictionary>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Word_ID
		{
			get
			{
				return this._Word_ID;
			}
			set
			{
				if ((this._Word_ID != value))
				{
					if (this._WordDictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWord_IDChanging(value);
					this.SendPropertyChanging();
					this._Word_ID = value;
					this.SendPropertyChanged("Word_ID");
					this.OnWord_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					if (this._Hospital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHospital_IDChanging(value);
					this.SendPropertyChanging();
					this._Hospital_ID = value;
					this.SendPropertyChanged("Hospital_ID");
					this.OnHospital_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hospital_Word_Hospital", Storage="_Hospital", ThisKey="Hospital_ID", OtherKey="Hospital_ID", IsForeignKey=true)]
		public Hospital Hospital
		{
			get
			{
				return this._Hospital.Entity;
			}
			set
			{
				Hospital previousValue = this._Hospital.Entity;
				if (((previousValue != value) 
							|| (this._Hospital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hospital.Entity = null;
						previousValue.Word_Hospitals.Remove(this);
					}
					this._Hospital.Entity = value;
					if ((value != null))
					{
						value.Word_Hospitals.Add(this);
						this._Hospital_ID = value.Hospital_ID;
					}
					else
					{
						this._Hospital_ID = default(int);
					}
					this.SendPropertyChanged("Hospital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WordDictionary_Word_Hospital", Storage="_WordDictionary", ThisKey="Word_ID", OtherKey="Word_ID", IsForeignKey=true)]
		public WordDictionary WordDictionary
		{
			get
			{
				return this._WordDictionary.Entity;
			}
			set
			{
				WordDictionary previousValue = this._WordDictionary.Entity;
				if (((previousValue != value) 
							|| (this._WordDictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WordDictionary.Entity = null;
						previousValue.Word_Hospitals.Remove(this);
					}
					this._WordDictionary.Entity = value;
					if ((value != null))
					{
						value.Word_Hospitals.Add(this);
						this._Word_ID = value.Word_ID;
					}
					else
					{
						this._Word_ID = default(int);
					}
					this.SendPropertyChanged("WordDictionary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class SP_SEARCH_HOSPITALResult
	{
		
		private int _Hospital_ID;
		
		private string _Hospital_Name;
		
		private string _Address;
		
		private string _Coordinate;
		
		private string _Website;
		
		public SP_SEARCH_HOSPITALResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_ID", DbType="Int NOT NULL")]
		public int Hospital_ID
		{
			get
			{
				return this._Hospital_ID;
			}
			set
			{
				if ((this._Hospital_ID != value))
				{
					this._Hospital_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hospital_Name", DbType="NVarChar(64)")]
		public string Hospital_Name
		{
			get
			{
				return this._Hospital_Name;
			}
			set
			{
				if ((this._Hospital_Name != value))
				{
					this._Hospital_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(128)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coordinate", DbType="VarChar(26)")]
		public string Coordinate
		{
			get
			{
				return this._Coordinate;
			}
			set
			{
				if ((this._Coordinate != value))
				{
					this._Coordinate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(64)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this._Website = value;
				}
			}
		}
	}
	
	public partial class SP_LOAD_DISEASE_IN_SPECIALITYResult
	{
		
		private int _Disease_ID;
		
		private string _Disease_Name;
		
		public SP_LOAD_DISEASE_IN_SPECIALITYResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_ID", DbType="Int NOT NULL")]
		public int Disease_ID
		{
			get
			{
				return this._Disease_ID;
			}
			set
			{
				if ((this._Disease_ID != value))
				{
					this._Disease_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disease_Name", DbType="NVarChar(64)")]
		public string Disease_Name
		{
			get
			{
				return this._Disease_Name;
			}
			set
			{
				if ((this._Disease_Name != value))
				{
					this._Disease_Name = value;
				}
			}
		}
	}
	
	public partial class SP_LOAD_DOCTOR_IN_DOCTOR_SPECIALITYResult
	{
		
		private int _Doctor_ID;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		public SP_LOAD_DOCTOR_IN_DOCTOR_SPECIALITYResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Doctor_ID", DbType="Int NOT NULL")]
		public int Doctor_ID
		{
			get
			{
				return this._Doctor_ID;
			}
			set
			{
				if ((this._Doctor_ID != value))
				{
					this._Doctor_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="NVarChar(32)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this._First_Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="NVarChar(32)")]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this._Last_Name = value;
				}
			}
		}
	}
	
	public partial class SP_LOAD_SPECIALITY_BY_HOSPITALIDResult
	{
		
		private int _Speciality_ID;
		
		private string _Speciality_Name;
		
		public SP_LOAD_SPECIALITY_BY_HOSPITALIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality_ID", DbType="Int NOT NULL")]
		public int Speciality_ID
		{
			get
			{
				return this._Speciality_ID;
			}
			set
			{
				if ((this._Speciality_ID != value))
				{
					this._Speciality_ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speciality_Name", DbType="NVarChar(32)")]
		public string Speciality_Name
		{
			get
			{
				return this._Speciality_Name;
			}
			set
			{
				if ((this._Speciality_Name != value))
				{
					this._Speciality_Name = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
