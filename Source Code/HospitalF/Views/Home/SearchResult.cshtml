@using HospitalF.Constant
@using HospitalF.Entities;
@using PagedList.Mvc;
@using PagedList;
@model HospitalF.Models.HomeModels

@{
    IPagedList<HospitalEntity> hospitalList = (IPagedList<HospitalEntity>)ViewBag.HospitalList;
    string suggestionSentence = (string)@ViewBag.SuggestionSentence;
}

<!-- MAIN CONTENT -->
<div id="content-results" class="col-md-12 col-md-offset-0 well">
    <div class="col-md-8">
        @using (Html.BeginForm(Constants.SearchResultAction, Constants.HomeController, FormMethod.Get, new { @class = "form-horizontal", @id = Constants.NormalSearchForm }))
        {
            <div class="input-group">
                @Html.TextBox("SearchValue", null, new { @class = "form-control", placeholder = "Nhập thông tin tìm kiếm..." })
                <div class="input-group-btn">
                    <button class="btn btn-default btn-primary" type="submit"
                            value="@Constants.NormalSearchForm" name="@Constants.Button"
                            id="normal-search-button">
                        <i class="fa fa-search"></i>&nbsp;Tìm Kiếm
                    </button>
                </div>
            </div>
            <p class="note"><strong>Ví dụ:</strong> chuyên khoa, tên bệnh viện, địa điểm...</p>
        }
        @if (hospitalList.TotalItemCount == 0)
        {
            <div class="col-md-12">
                <p><strong>Không có kết quả tìm kiếm với từ khóa</strong> <span style="color: blue">@(ViewBag.SearchValue)</span></p>

                <ul>
                    <li>Xin bạn chắc chắn rằng tất cả các từ đều đúng chính tả.</li>
                    <li>Hãy thử những từ khóa khác.</li>
                </ul>
            </div>
        }
        @if (!string.IsNullOrEmpty(suggestionSentence))
        {
            suggestionSentence = suggestionSentence.Trim();
            <p>
                Có phải bạn muốn tìm <i>
                    @Html.ActionLink(suggestionSentence,
                                Constants.SearchResultAction, Constants.HomeController,
                                new { SearchValue = suggestionSentence }, null)
                </i>
            </p>
        }
    </div>



    <div class="col-md-12">
        @using (Html.BeginForm(Constants.SearchResultAction, Constants.HomeController, FormMethod.Get, new { @class = "smart-form", @id = ViewBag.SearchType }))
        {
            string button = ViewBag.SearchType;
            if (Constants.LocationSearchForm.Equals(button))
            {
            <fieldset>
                <legend>Nhập thông tin vị trí</legend>
                <div class="row">
                    <label class="label col col-2">Tìm theo</label>
                    <section class="col col-4">
                        <label class="select">
                            @Html.DropDownListFor(m => m.LocationType, (SelectList)ViewBag.LocationTypeList, new { @class = "form-control"}) 
                            <i></i>
                        </label>
                    </section>
                    <label class="label col col-2" id="CurrentLocationLabel">Vị trí cần tìm</label>
                    <section class="col col-4" id="CurrentLocationSection">
                        <label class="input">
                            <i class="icon-append fa fa-location-arrow"></i>
                            @Html.TextBoxFor(m => m.Position, new { @class = "form-control", @placeholder = "Vị trí cần tìm...", })
                            @Html.TextBoxFor(m => m.Coordinate, new { @type = "hidden" })
                            <b class="tooltip tooltip-top-right">Nhập vị trí cần tìm</b>
                        </label>
                    </section>
                    <label class="label col col-2">Bán kính</label>
                    <section class="col col-4">
                        <label class="select">
                            @Html.DropDownListFor(m => m.Radius, (SelectList)ViewBag.RadiusList, new { @class = "form-control"}) 
                            <i></i>
                        </label>
                    </section>
                </div>
            </fieldset>
            }
            else if (Constants.AdvancedSearchForm.Equals(button))
            {
            <fieldset>
                <legend>Nhập thông tin bệnh viện</legend>
                <div class="row">
                    <label class="label col col-2">Tỉnh / Thành phố</label>
                    <section class="col col-4">
                        <label class="select">
                            @Html.DropDownListFor(m => m.CityID, (SelectList)ViewBag.CityList,
                                                Constants.RequireCity, new { @class = "form-control" })
                            <i></i>
                        </label>
                    </section>
                    <label class="label col col-2">Quận / Huyện</label>
                    <section class="col col-4">
                        <label class="select">
                            @Html.DropDownListFor(m => m.DistrictID, (SelectList)ViewBag.DistrictList,
                                                Constants.RequireDistrict, new { @class = "form-control" })
                            <i></i>
                        </label>
                    </section>
                </div>
                <div class="row">
                    <label class="label col col-2">Chuyên khoa</label>
                    <section class="col col-4">
                        <label class="select">
                            @Html.DropDownListFor(m => m.SpecialityID, (SelectList)ViewBag.SpecialityList,
                                                Constants.RequireSpeciality, new { @class = "form-control" })
                            <i></i>
                        </label>
                    </section>
                    <label class="label col col-2">Triệu chứng</label>
                    <section class="col col-4">
                        <label class="input">
                            <i class="icon-append fa fa-plus-square"></i>
                            @Html.TextBoxFor(m => m.DiseaseName, new
                                       {
                                           @class = "form-control",
                                           @placeholder = "Triệu chứng...",
                                           @id = "disease-tag"
                                       })
                            <b class="tooltip tooltip-top-right">Nhập triệu chứng bệnh</b>
                        </label>
                    </section>
                </div>
            </fieldset>
            }
            
            <footer>
                <button class="btn btn-default btn-primary" type="submit" value="@(ViewBag.SearchType)" name="@(Constants.Button)">
                    <i class="fa fa-search"></i>&nbsp;Tìm kiếm
                </button>
            </footer>
        }
    </div>

    <div class="col-md-12">
        <hr />
        <div id="hospital-list-results" class="col-md-4" style="padding: 0">
            @if (hospitalList.TotalItemCount > 0)
            {
                <h1 class="font-md">Danh sách <span class="semi-bold">bệnh viện</span><small class="text-danger"> &nbsp;&nbsp;(@(hospitalList != null ? hospitalList.TotalItemCount : 0) kết quả)</small></h1>
                foreach (HospitalEntity hospital in hospitalList)
                {
                <div class="search-results clearfix smart-form hospital-record">

                    <h5 class="truncate"><i class="fa fa-plus-square txt-color-blue"></i>&nbsp;<a href="/Home/Hospital?hospitalId=@(hospital.Hospital_ID)">@(hospital.Hospital_Name)</a></h5>

                    <div style="width: 100%">
                        <div class="display-inline">
                            @if (hospital.Rating != null)
                            {
                                for (int i = 1; i <= 10; i++)
                                {
                                    double rate = Math.Ceiling((double)(hospital.Rating == null ? 0 : hospital.Rating) * 2);
                                    if (rate == i)
                                    {
                                <input name="star-@(hospital.Hospital_ID)" type="radio" class="star {half:true}" checked="checked" disabled="disabled"/>
                                    }
                                    else
                                    {
                                <input name="star-@(hospital.Hospital_ID)" type="radio" class="star {half:true}" disabled="disabled"/>
                                    }
                                }
                            }
                            else
                            {
                                <p class="note truncate">Chưa có đánh giá</p>
                            }
                        </div>
                        @if (hospital.Rating != null)
                        {
                            <strong>@(Math.Round((double)hospital.Rating, 1))</strong>
                        }
                    </div>
                    <div style="width: 100%" class="hospital-record-description">
                        <p class="description truncate">
                            <i class="fa fa-location-arrow"></i>&nbsp;@(hospital.Address)
                        </p>

                        @if (hospital.Distance > 0)
                        {
                            <p class="description truncate">
                                <i class="fa fa-truck"></i>&nbsp;<strong>@(hospital.Distance / 1000)&nbsp;km</strong> - <i class="fa fa-mobile"></i>&nbsp;@(hospital.Phone_Number)
                            </p>
                        }
                        else
                        {
                            <p class="description truncate">
                                <i class="fa fa-mobile"></i>&nbsp;@(hospital.Phone_Number)
                            </p>
                        }

                    </div>

                </div>               
                }
                
                <div class="text-center">
                    <hr>
                    @Html.PagedListPager(hospitalList, page => Url.Content(Constants.SearchResultAction + "?" + ViewBag.Query + "&page=" + page), PagedListRenderOptions.OnlyShowFivePagesAtATime)
                    <br>
                    <br>
                    <br>
                </div>
            }
        </div>

        @if (hospitalList.TotalItemCount > 0)
        {
            <div id="map-results" class="col-md-8" style="padding: 0">
                <div id="map-canvas"></div>
            </div>
        }


    </div>
</div>
<!-- END MAIN CONTENT -->

<script type="text/javascript">
    @*AJAX for auto completing basic search value textbox*@
    $(document).ready(function () {

        $('.truncate').bind('mouseenter', function () {
            var $this = $(this);

            if (this.offsetWidth < this.scrollWidth && !$this.attr('title')) {
                $this.attr('title', $this.text());
            }
        });

        $("#SearchValue").on('input', function () {
            var statesProgress = $("#states-loading-search-progress");
            var availableTags = new Array();
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.LoadSuggestSentenceAction))",
                success: function (data) {
                    $.each(data, function (id, option) {
                        availableTags.push(option);
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
            $("#SearchValue").autocomplete({
                source: function (request, response) {
                    var results = $.ui.autocomplete.filter(availableTags, request.term);
                    response(results.slice(0, 5));
                }
            });
        });
    });

    @*Data validation*@
    $(document).ready(function () {
        $("#normal-search-button").click(function () {
            var searchValue = $('#SearchValue').val().trim();
            if (searchValue != "") {
                $('#normal-search-form').submit();
            }
            else {
                return false;
            }
        });
    });

    @*AJAX for cascading District drop down list*@
    $(document).ready(function () {
        $("#CityID").change(function () {
            var selectedItem = $(this).val();
            var ddlDistrict = $("#DistrictID");
            var statesProgress = $("#states-loading-district-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.GetDistrictByCityAction))",
                data: { "cityId": selectedItem },
                success: function (data) {
                    ddlDistrict.html('');
                    $.each(data, function (id, option) {
                        ddlDistrict.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
        });
    });

    $(document).ready(function () {
        // GOOGLE - API
        // Google map
        var map;
        // Copy list of google markers
        var markers = [];
        // Copy list of content string of inforwindow
        var contentStringList = [];
        // List of windows that show detailed information of hospital on map
        var infowindow = new google.maps.InfoWindow();
        // Parse JSON hospital list to javascript object
        var hospitalList = JSON && JSON.parse('@Html.Raw(ViewBag.JsonHospitalList)') || $.parseJSON('@Html.Raw(ViewBag.JsonHospitalList)');
        // Position
        var position = '@(Model.Coordinate)';
        // Radius
        var radius = @(Model.Radius != null ? Model.Radius * 1000 : 0);
 

        function panToMarker(coordinate) {
            lat = coordinate.split(',')[0];
            lng = coordinate.split(',')[1].trim();
            map.panTo(new google.maps.LatLng(lat, lng));
        }

        function toggleBounce(marker) {

            if (marker.getAnimation() != null) {
                marker.setAnimation(null);
            } else {
                marker.setAnimation(google.maps.Animation.BOUNCE);
            }
        }

        function clearToogleBounce() {
            for (var i; i < markers.length; i++) {
                markers[i].setAnimation(null);
            }
        }

        function onClickHospitalRecord(record, marker, contentString) {
            $(".hospital-record").attr("style", "");
            record.attr("style", "background-color: #d9edf7");
            map.panTo(marker.getPosition());
            infowindow.setContent(contentString);
            infowindow.open(map, marker);
        }

        // Create marker of hospital on map
        function createMarker(latlng, html, markerType) {
            // Add markers to the map

            // Marker sizes are expressed as a Size of X,Y
            // where the origin of the image (0,0) is located
            // in the top left of the image.

            // Origins, anchor positions and coordinates of the marker
            // increase in the X direction to the right and in
            // the Y direction down.
            var image = {
                url: '../Content/img/hospital-2.png',
                // This marker is 20 pixels wide by 32 pixels tall.
                size: new google.maps.Size(32, 37),
                // The origin for this image is 0,0.
                origin: new google.maps.Point(0, 0),
                // The anchor for this image is the base of the flagpole at 0,32.
                anchor: new google.maps.Point(0, 32)
            };
            // Shapes define the clickable region of the icon.
            // The type defines an HTML &lt;area&gt; element 'poly' which
            // traces out a polygon as a series of X,Y points. The final
            // coordinate closes the poly by connecting to the first
            // coordinate.
            var shape = {
                coords: [1, 1, 1, 37, 32, 37, 32, 1],
                type: 'poly'
            };

            var contentString = html;
            var marker;
            if (markerType == 0) {
                marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    draggable: false,
                    optimized: false,
                    animation: google.maps.Animation.BOUNCE,
                    zIndex: Math.round(latlng.lat() * -100000) << 5
                });
            } else {
                marker = new google.maps.Marker({
                    position: latlng,
                    map: map,
                    draggable: false,
                    optimized: false,
                    animation: google.maps.Animation.DROP,
                    icon: image,
                    shape: shape,
                    zIndex: Math.round(latlng.lat() * -100000) << 5
                });
            }
            markers.push(marker);
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.setContent(contentString);
                infowindow.open(map, marker);
                map.panTo(marker.getPosition());
            });

            google.maps.event.addListener(marker, 'mouseover', function () {
                toggleBounce(marker);
            });

            google.maps.event.addListener(marker, 'mouseout', function () {
                toggleBounce(marker);
            });

        }
        // ------------------------------------------------------------------------

        function initializeMap() {
            if (hospitalList.length > 0) {
                var latlng = null;
                if (position) {
                    // Get coordinate of position
                    postionLongitude = position.split(',')[0];
                    postionLatitude = position.split(',')[1].trim();
                    latlng = new google.maps.LatLng(postionLongitude, postionLatitude);
                }
                // Draw the map
                var options = {
                    zoom: 10,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    mapTypeControl: false
                };

                map = new google.maps.Map(document.getElementById("map-canvas"), options);

                google.maps.event.addListener(map, 'click', function () {
                    infowindow.close();
                });
                // ------------------------------------------------------------------------
                if (position) {
                    // Draw circle to show the radius from input position
                    var circleOptions = {
                        strokeColor: '#2c699d',
                        strokeOpacity: 0.5,
                        strokeWeight: 2,
                        fillColor: '#3276b1',
                        fillOpacity: 0.1,
                        map: map,
                        center: latlng,
                        radius: isNaN(radius) ? 0 : radius
                    };

                    var circle = new google.maps.Circle(circleOptions);

                    google.maps.event.addListener(circle, 'click', (function () {
                        infowindow.close();
                    }));
                }
                // ------------------------------------------------------------------------

                // Fit map for user can view all marker on map with highest zoom level
                var myBounds = new google.maps.LatLngBounds();
                // Create marker on map with info window
                for (i = 0; i < hospitalList.length; i++) {
                    var coordinate = hospitalList[i].Coordinate;
                    var longitude = (hospitalList[i].Coordinate.split(',')[0]).trim();
                    var latitude = (hospitalList[i].Coordinate.split(',')[1]).trim();
                    myBounds.extend(new google.maps.LatLng(longitude, latitude));
                    var contentString = '<div style="width: 300px;">' +
                                        '<table class="table">' +
                                        '<thead>' +
                                        '<tr class="info">' +
                                        '<th><h5>' + hospitalList[i].Hospital_Name + '</h5></th>' +
                                        '</tr>' +
                                        '</thead>' +
                                        '<tbody>' +
                                        '<tr>' +
                                        '<td><i class="fa fa-lg fa-location-arrow"></i>&nbsp;' + hospitalList[i].Address + '</td>' +
                                        '</tr>' +
                                        '<tr>' +
                                        '<td><i class="fa fa-lg fa-mobile"></i>&nbsp;' + hospitalList[i].Phone_Number + '</td>' +
                                        '</tr>' +
                                        '</tbody>' +
                                        '</table>' +
                                        '</div>';
                    contentStringList.push(contentString);
                    createMarker(new google.maps.LatLng(longitude, latitude), contentString, 1);
                }
                $(".hospital-record").each(function (index) {
                    $(this).click(function () {
                        onClickHospitalRecord($(this), markers[index], contentStringList[index]);
                    });
                });
                if (position) {
                    myBounds.extend(latlng);
                    createMarker(new google.maps.LatLng(postionLongitude, postionLatitude), "Vị trí hiện tại", 0);
                }
                map.fitBounds(myBounds);
                // ------------------------------------------------------------------------
            }
        }

        // Initialize map when page load 
        google.maps.event.addDomListener(window, 'load', initializeMap);
        // ------------------------------------------------------------------------
    });
</script>

<script type="text/javascript">
        @*AJAX for auto completing basic search value textbox*@
    $(document).ready(function () {
        $("#sentece-tag").on('input', function () {
            var statesProgress = $("#states-loading-search-progress");
            var availableTags = new Array();
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.LoadSuggestSentenceAction))",
                success: function (data) {
                    $.each(data, function (id, option) {
                        availableTags.push(option);
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
            $("#sentece-tag").autocomplete({
                source: function (request, response) {
                    var results = $.ui.autocomplete.filter(availableTags, request.term);
                    response(results.slice(0, 5));
                }
            });
        });
    });

    @*AJAX for auto completing Disease textbox*@
    $(document).ready(function () {
        $("#SpecialityID").change(function () {
            var selectedItem = $(this).val();
            var statesProgress = $("#states-loading-disease-progress");
            var availableTags = new Array();
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.GetDeseaseBySpecialityAction))",
                data: { "specialityId": selectedItem },
                success: function (data) {
                    $.each(data, function (id, option) {
                        availableTags.push(option.name);
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
            //$("#disease-tag").autocomplete({
            //    source: function (request, response) {
            //        var results = $.ui.autocomplete.filter(availableTags, request.term);
            //        response(results.slice(0, 5));
            //    }
            //});
            $("#disease-tag").autocomplete({
                source: availableTags
            });
        });
    });

    @*AJAX for cascading District drop down list*@
    $(document).ready(function () {
        $("#CityID").change(function () {
            var selectedItem = $(this).val();
            var ddlDistrict = $("#DistrictID");
            var statesProgress = $("#states-loading-district-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.GetDistrictByCityAction))",
                data: { "cityId": selectedItem },
                success: function (data) {
                    ddlDistrict.html('');
                    $.each(data, function (id, option) {
                        ddlDistrict.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
        });
    });

    @*Location type text changed*@
    $(document).ready(function () {
        var selectedLocationTypeItem = $('#LocationType').val();
        if (selectedLocationTypeItem == 1) {
            $("#CurrentLocationSection").hide();
            $("#CurrentLocationLabel").hide();
            getCurrentPosition();
        } else {
            $("#CurrentLocationSection").show();
            $("#CurrentLocationLabel").show();
        }

        function setPosition(position) {
            var currentLat = position.coords.latitude;
            var currentLng = position.coords.longitude;
            $("#Coordinate").val(currentLat + ", " + currentLng);
        }

        function getCurrentPosition() {
            // Try HTML5 geolocation
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(setPosition, function () {
                    console.log("Browser does not support geolocation...");
                });
            } else {
                // Browser doesn't support Geolocation
                return false;
            }
        }

        function getLatLong(address) {
            var geo = new google.maps.Geocoder;

            geo.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    return results[0].geometry.location;
                } else {
                    console.log("Geocode was not successful for the following reason: " + status);
                }

            });

        }

        $('#location-search-form button').click(function (event) {
            if ($("#LocationType").val() == 1) {
                var object;
                $.when(getCurrentPosition()).done(function () {
                    $('#location-search-form').submit();
                });
            }
        });

        $("#LocationType").change(function () {
            var selectedItem = $(this).val();
            if (selectedItem == 1) {
                $("#CurrentLocationSection").hide();
                $("#CurrentLocationLabel").hide();
                getCurrentPosition();
            } else {
                $("#CurrentLocationSection").show();
                $("#CurrentLocationLabel").show();
            }
        });
    });

    @*Data validation*@
    $(document).ready(function () {
        $('#normal-search-button').click(function () {
            var searchValue = $('#sentece-tag').val().trim();
            if (searchValue != "") {
                $('#normal-search-form').submit();
            }
            else {
                return false;
            }
        });

        $('#normal-search-form').validate({
            // Rules for form validation
            rules: {
                SearchValue: {
                    maxlength: 100
                }
            },

            // Messages for form validation
            messages: {
                SearchValue: {
                    maxlength: '@string.Format(ErrorMessage.CEM003, Constants.SearchValue, 100)'
                }
            },

            // Do not change code below
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            }
        });

        $('#location-search-form').validate({
            // Rules for form validation
            rules: {
                Position: {
                    required: true
                }
            },

            // Messages for form validation
            messages: {
                Position: {
                    required: '@string.Format(ErrorMessage.CEM001, "vị trí")'
                }
            },

            // Do not change code below
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            }
        });

        $('#advanced-search-form').validate({
            // Rules for form validation
            rules: {
                CityID: {
                    required: true
                }
            },

            // Messages for form validation
            messages: {
                CityID: {
                    required: '@string.Format(ErrorMessage.CEM011, Constants.City)'
                }
            },

            // Do not change code below
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            }
        });
    });
</script>
@*
<div class="row" id="filter-bar">
    <div class="form-group col-md-4">
        <label class="control-label col-md-4" for="prepend">Đánh Giá</label>
        <div class="col-md-8">
            <div class="icon-addon addon-sm">
                <select class="form-control">
                    <option>Cao Nhất</option>
                    <option>Thấp Nhât</option>
                </select>
                <label class="glyphicon glyphicon-sort" title="Đánh Giá"></label>
            </div>
        </div>
    </div>


    <div class="form-group col-md-4">
        <label class="control-label col-md-4" for="prepend">Loại</label>
        <div class="col-md-8">
            <div class="icon-addon addon-sm">
                @Html.DropDownList("HospitalType", (SelectList)ViewBag.HospitalTypes, "Tất Cả", new { @class = "form-control" })
                <label class="glyphicon glyphicon-list-alt" title="Loại Bệnh Viện"></label>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <button class="btn btn-primary pull-right" type="submit">
            <i class="fa fa-refresh"></i>&nbsp;
                            Cập Nhật
        </button>
    </div>
</div>
*@
