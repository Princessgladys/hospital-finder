@using HospitalF.Constant
@model HospitalF.Models.HomeModel
@{
    ViewBag.Title = "Tìm kiếm bệnh viện - Trang chủ";
}
<div id="content" class="col-md-10 col-md-offset-1">
    <div id="main-logo">
        <img src="../Content/img/hospital-icon.png" style="visibility: hidden; width: 25%; height: 25%;" />
    </div>

    <div class="well" style="background-color: white;">
        <ul id="myTab1" class="nav nav-tabs bordered">
            <li class="active">
                <a href="#s1" data-toggle="tab"><i class="fa fa-fw fa-lg fa-search"></i>&nbsp;Tìm Kiếm Cơ Bản</a>
            </li>
            <li>
                <a href="#s2" data-toggle="tab"><i class="fa fa-fw fa-lg fa-location-arrow"></i>&nbsp;Tìm Kiếm Theo Vị Trí</a>
            </li>
            <li>
                <a href="#s3" data-toggle="tab"><i class="fa fa-fw fa-lg fa-th-list"></i>&nbsp;Tìm Kiếm Nâng Cao</a>
            </li>
        </ul>

        <div id="myTabContent1" class="tab-content padding-10">
            <div class="tab-pane fade in active" id="s1">
                @using (Html.BeginForm(Constants.SearchResultAction, Constants.HomeController, FormMethod.Get, new { @class = "smart-form", @id = Constants.NormalSearchForm }))
                {

                    <fieldset>
                        <legend>Nhập từ khóa về bệnh viện</legend>
                        <div class="row">
                            <section class="col col-md-12">
                                <label class="input">
                                    @Html.TextBoxFor(m => m.SearchValue, new
                             {
                                 @placeholder = "Nhập thông tin tìm kiếm...",
                                 @list = "list"
                             })
                                </label>
                                <p class="note"><strong>Ví dụ:</strong> Tên bệnh viện, bệnh lý, địa điểm...</p>
                            </section>
                        </div>
                    </fieldset>
                    <footer>
                        <button class="btn btn-default btn-primary" type="submit"
                                value="@Constants.NormalSearchForm" name="@Constants.Button"
                                id ="normal-search-button">
                            <i class="fa fa-search"></i>&nbsp;Tìm Kiếm
                        </button>
                    </footer>
                }
            </div>

            <div class="tab-pane fade" id="s2">
                @using (Html.BeginForm(Constants.SearchResultAction, Constants.HomeController, FormMethod.Get, new { @target = "_blank", @class = "smart-form", @id = @Constants.LocationSearchForm }))
                {
                    <fieldset>
                        <legend>Nhập thông tin vị trí</legend>
                        <div class="row">
                            <label class="label col col-2">Tìm theo</label>
                            <section class="col col-4">
                                <label class="select">
                                    @Html.DropDownListFor(m => m.LocationType, (SelectList)ViewBag.LocationTypeList, new { @class = "form-control" })
                                    <i></i>
                                </label>
                            </section>
                            <label class="label col col-2" id="CurrentLocationLabel">Vị trí cần tìm</label>
                            <section class="col col-4" id="CurrentLocationSection">
                                <label class="input">
                                    <i class="icon-append fa fa-location-arrow"></i>
                                    @Html.TextBoxFor(m => m.Position, new { @class = "form-control", @placeholder = "Vị trí cần tìm...", })
                                    @Html.TextBoxFor(m => m.Coordinate, new { @type = "hidden" })
                                    <b class="tooltip tooltip-top-right">Nhập vị trí cần tìm</b>
                                </label>
                            </section>
                            <label class="label col col-2">Bán kính</label>
                            <section class="col col-4">
                                <label class="select">
                                    @Html.DropDownListFor(m => m.Radius, (SelectList)ViewBag.RadiusList, new { @class = "form-control" })
                                    <i></i>
                                </label>
                            </section>
                        </div>
                    </fieldset>
                    <footer>
                        <button class="btn btn-primary"
                                value="@Constants.LocationSearchForm" name="@Constants.Button">
                            <i class="fa fa-search"></i>&nbsp;
                            Tìm Kiếm
                        </button>
                    </footer>
                }
            </div>

            <div class="tab-pane fade" id="s3">
                @using (Html.BeginForm(Constants.SearchResultAction, Constants.HomeController, FormMethod.Get, new { @class = "smart-form", @id = Constants.AdvancedSearchForm }))
                {
                    <fieldset>
                        <legend>Nhập thông tin bệnh viện</legend>
                        <div class="row">
                            <label class="label col col-2">Tỉnh / Thành phố</label>
                            <section class="col col-4">
                                <label class="select">
                                    @Html.DropDownListFor(m => m.CityID, (SelectList)ViewBag.CityList,
                                                Constants.RequireCity, new { @class = "form-control" })
                                    <i></i>
                                </label>
                            </section>
                            <label class="label col col-2">Quận / Huyện</label>
                            <section class="col col-4">
                                <label class="select">
                                    @Html.DropDownListFor(m => m.DistrictID, (SelectList)ViewBag.DistrictList,
                                                Constants.RequireDistrict, new { @class = "form-control" })
                                    <i></i>
                                </label>
                            </section>
                        </div>
                        <div class="row">
                            <label class="label col col-2">Chuyên khoa</label>
                            <section class="col col-4">
                                <label class="select">
                                    @Html.DropDownListFor(m => m.SpecialityID, (SelectList)ViewBag.SpecialityList,
                                                Constants.RequireSpeciality, new { @class = "form-control" })
                                    <i></i>
                                </label>
                            </section>
                            <label class="label col col-2">Triệu chứng</label>
                            <section class="col col-4">
                                <label class="input">
                                    <i class="icon-append fa fa-plus-square"></i>
                                    @Html.TextBoxFor(m => m.DiseaseName, new
                                       {
                                           @class = "form-control",
                                           @placeholder = "Triệu chứng...",
                                           @id = "disease-tag"
                                       })
                                    <b class="tooltip tooltip-top-right">Nhập triệu chứng bệnh</b>
                                </label>
                            </section>
                        </div>
                    </fieldset>
                    <footer>
                        <button class="btn btn-primary" type="submit"
                                value="@Constants.AdvancedSearchForm" name="@Constants.Button">
                            <i class="fa fa-search"></i>&nbsp;
                            Tìm Kiếm
                        </button>
                    </footer>
                }
            </div>

        </div>
        <hr />
        <div class="fb-like" data-href="http://www.timkiembenhvien.com" data-layout="standard" data-action="like" data-show-faces="true" data-share="true"></div>
    </div>
</div>

<script type="text/javascript">            
    @*AJAX for auto completing basic search value textbox*@
    @*AJAX for auto completing basic search value textbox*@
    $(document).ready(function () {

        $('.truncate').bind('mouseenter', function () {
            var $this = $(this);

            if (this.offsetWidth < this.scrollWidth && !$this.attr('title')) {
                $this.attr('title', $this.text());
            }
        });

        $("#SearchValue").on('keyup', function () {
            var statesProgress = $("#states-loading-search-progress");
            var availableTags = new Array();
            var searchValue = $(this).val();
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.LoadSuggestSentenceAction))",
                data: { searchQuery: searchValue },
                success: function (data) {
                    $.each(data, function (id, option) {
                        availableTags.push(option);
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
            $("#SearchValue").autocomplete({
                source: function (request, response) {
                    var results = $.ui.autocomplete.filter(availableTags, request.term);
                    response(results.slice(0, 5));
                }
            });
        });
    });

    @*AJAX for auto completing Disease textbox*@
    $(document).ready(function () {
        $("#SpecialityID").change(function () {
            var selectedItem = $(this).val();
            var statesProgress = $("#states-loading-disease-progress");
            var availableTags = new Array();
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.GetDeseaseBySpecialityAction))",
                data: { "specialityId": selectedItem },
                success: function (data) {
                    $.each(data, function (id, option) {
                        availableTags.push(option.name);
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
            //$("#disease-tag").autocomplete({
            //    source: function (request, response) {
            //        var results = $.ui.autocomplete.filter(availableTags, request.term);
            //        response(results.slice(0, 5));
            //    }
            //});
            $("#disease-tag").autocomplete({
                source: availableTags
            });
        });
    });

    @*AJAX for cascading District drop down list*@
    $(document).ready(function () {
        $("#CityID").change(function () {
            var selectedItem = $(this).val();
            var ddlDistrict = $("#DistrictID");
            var statesProgress = $("#states-loading-district-progress");
            statesProgress.show();
            $.ajax({
                cache: false,
                type: "GET",
                url: "@(Url.RouteUrl(Constants.GetDistrictByCityAction))",
                data: { "cityId": selectedItem },
                success: function (data) {
                    ddlDistrict.html('');
                    $.each(data, function (id, option) {
                        ddlDistrict.append($('<option></option>').val(option.id).html(option.name));
                    });
                    statesProgress.hide();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    statesProgress.hide();
                }
            });
        });
    });

    @*Location type text changed*@
    $(document).ready(function () {

        function setPosition(position) {
            var currentLat = position.coords.latitude;
            var currentLng = position.coords.longitude;
            $("#Coordinate").val(currentLat + ", " + currentLng);
        }

        function getCurrentPosition() {
            // Try HTML5 geolocation
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(setPosition, function () {
                    console.log("Browser does not support geolocation...");
                });
            } else {
                // Browser doesn't support Geolocation
                return false;
            }
        }

        function getLatLong(address) {
            var geo = new google.maps.Geocoder;

            geo.geocode({ 'address': address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    return results[0].geometry.location;
                } else {
                    console.log("Geocode was not successful for the following reason: " + status);
                }

            });

        }

        $('#location-search-form button').click(function (event) {
            if ($("#LocationType").val() == 1) {
                var object;
                $.when(getCurrentPosition()).done(function () {
                    $('#location-search-form').submit();
                });
            }
        });

        $("#LocationType").change(function () {
            var selectedItem = $(this).val();
            if (selectedItem == 1) {
                $("#CurrentLocationSection").hide();
                $("#CurrentLocationLabel").hide();
                getCurrentPosition();
            } else {
                $("#CurrentLocationSection").show();
                $("#CurrentLocationLabel").show();
            }
        });
    });

    @*Data validation*@
    $(document).ready(function () {
        $('#normal-search-button').click(function () {
            var searchValue = $('#SearchValue').val().trim();
            if (searchValue != "") {
                $('#normal-search-form').submit();
            }
            else {
                return false;
            }
        });

        $('#normal-search-form').validate({
            // Rules for form validation
            rules: {
                SearchValue: {
                    maxlength: 100
                }
            },

            // Messages for form validation
            messages: {
                SearchValue: {
                    maxlength: '@string.Format(ErrorMessage.CEM003, Constants.SearchValue, 100)'
                }
            },

            // Do not change code below
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            }
        });

        $('#location-search-form').validate({
            // Rules for form validation
            rules: {
                Position: {
                    required: true
                }
            },

            // Messages for form validation
            messages: {
                Position: {
                    required: '@string.Format(ErrorMessage.CEM001, "vị trí")'
                }
            },

            // Do not change code below
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            }
        });

        $('#advanced-search-form').validate({
            // Rules for form validation
            rules: {
                CityID: {
                    required: true
                }
            },

            // Messages for form validation
            messages: {
                CityID: {
                    required: '@string.Format(ErrorMessage.CEM011, Constants.City)'
                }
            },

            // Do not change code below
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            }
        });
    });
</script>
